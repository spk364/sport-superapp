#!/usr/bin/env python3
"""
Test script for context-aware AI functionality
"""

import requests
import json
from datetime import datetime

API_BASE = "http://localhost:8000/api/v1"

def test_context_aware_chat():
    """Test the context-aware chat functionality"""
    
    # Test data
    user_profile = {
        "age": 30,
        "gender": "–ú—É–∂—Å–∫–æ–π", 
        "height": 180,
        "weight": 75,
        "goals": ["–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã"],
        "fitness_level": "–°—Ä–µ–¥–Ω–∏–π",
        "equipment": ["–®—Ç–∞–Ω–≥–∞", "–ì–∞–Ω—Ç–µ–ª–∏"],
        "limitations": [],
        "nutrition_goal": "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã"
    }
    
    # Conversation history simulating previous messages
    conversation_history = [
        {
            "role": "system",
            "content": "–¢—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä —Å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–π –ø–∞–º—è—Ç—å—é. –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤–æ–∑—Ä–∞—Å—Ç 30 –ª–µ—Ç, —Ü–µ–ª–∏: –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
            "timestamp": "2025-06-18T10:00:00Z"
        },
        {
            "role": "user",
            "content": "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
            "timestamp": "2025-06-18T10:01:00Z"
        },
        {
            "role": "assistant", 
            "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ä–µ—à–∏–ª –∑–∞–Ω—è—Ç—å—Å—è –Ω–∞–±–æ—Ä–æ–º –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã. –£—á–∏—Ç—ã–≤–∞—è —Ç–≤–æ–∏ —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç—É–ø –∫ —à—Ç–∞–Ω–≥–µ –∏ –≥–∞–Ω—Ç–µ–ª—è–º, –º—ã –º–æ–∂–µ–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É.",
            "timestamp": "2025-06-18T10:01:30Z"
        },
        {
            "role": "user",
            "content": "–ö–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –≥—Ä—É–¥–∏?",
            "timestamp": "2025-06-18T10:02:00Z"
        },
        {
            "role": "assistant",
            "content": "–î–ª—è –≥—Ä—É–¥–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é: –∂–∏–º –ª–µ–∂–∞ —Å–æ —à—Ç–∞–Ω–≥–æ–π, –∂–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ø–æ–¥ —É–≥–ª–æ–º, –æ—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö. –ù–∞—á–Ω–∏ —Å 3 –ø–æ–¥—Ö–æ–¥–æ–≤ –ø–æ 8-10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.",
            "timestamp": "2025-06-18T10:02:30Z"
        }
    ]
    
    # Current message that should reference the context
    current_message = "–ê —á—Ç–æ –Ω–∞—Å—á–µ—Ç —Ç–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞–ª? –ú–æ–∂–Ω–æ –ª–∏ –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å?"
    
    # Prepare request
    request_data = {
        "user_id": "test-user-123",
        "session_id": "test-session-456", 
        "message": current_message,
        "conversation_history": conversation_history,
        "user_profile": user_profile,
        "context_settings": {
            "include_recent_messages": 8,
            "include_session_summary": True,
            "max_context_tokens": 3000
        }
    }
    
    print("üß† Testing Context-Aware AI Chat")
    print(f"üìù User message: {current_message}")
    print(f"üìö Context: {len(conversation_history)} messages in history")
    print(f"üë§ Profile: {user_profile['goals'][0]}, {user_profile['fitness_level']} level")
    print("="*60)
    
    try:
        # Send request
        response = requests.post(
            f"{API_BASE}/llm/chat/send",
            json=request_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            ai_response = result.get("response_text", "")
            
            print("‚úÖ SUCCESS - AI Response:")
            print(f"ü§ñ {ai_response}")
            print()
            
            # Check if the response shows context awareness
            context_indicators = [
                "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ" in ai_response.lower(),
                "—Å–æ–≤–µ—Ç–æ–≤–∞–ª" in ai_response.lower() or "—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª" in ai_response.lower(),
                "–∂–∏–º" in ai_response.lower(),
                "–≥—Ä—É–¥–∏" in ai_response.lower(),
                "–∏–∑–º–µ–Ω–∏—Ç—å" in ai_response.lower() or "–∑–∞–º–µ–Ω–∏—Ç—å" in ai_response.lower()
            ]
            
            context_score = sum(context_indicators)
            print(f"üß† Context Awareness Score: {context_score}/5")
            
            if context_score >= 3:
                print("‚úÖ EXCELLENT: AI demonstrates strong context awareness!")
            elif context_score >= 2:
                print("‚úÖ GOOD: AI shows some context awareness")
            else:
                print("‚ùå POOR: AI shows limited context awareness")
                
            # Metadata
            metadata = result.get("metadata", {})
            if metadata:
                print(f"üìä Tokens used: {metadata.get('tokens_used', 'N/A')}")
                print(f"‚ö° Latency: {metadata.get('latency_ms', 'N/A')}ms")
                print(f"ü§ñ Model: {metadata.get('model', 'N/A')}")
                
        else:
            print(f"‚ùå ERROR: {response.status_code}")
            print(f"Response: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Exception: {e}")


def test_without_context():
    """Test the same message without context for comparison"""
    
    request_data = {
        "user_id": "test-user-123",
        "session_id": "test-session-456",
        "message": "–ê —á—Ç–æ –Ω–∞—Å—á–µ—Ç —Ç–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞–ª? –ú–æ–∂–Ω–æ –ª–∏ –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å?",
        "conversation_history": [],  # No context
        "user_profile": None,
        "context_settings": {
            "include_recent_messages": 0,
            "include_session_summary": False,
            "max_context_tokens": 0
        }
    }
    
    print("\n" + "="*60)
    print("üö´ Testing WITHOUT Context (for comparison)")
    print("="*60)
    
    try:
        response = requests.post(
            f"{API_BASE}/llm/chat/send",
            json=request_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            ai_response = result.get("response_text", "")
            
            print("üìù AI Response WITHOUT context:")
            print(f"ü§ñ {ai_response}")
            
            # This should show confusion or request for clarification
            if any(phrase in ai_response.lower() for phrase in [
                "–Ω–µ –ø–æ–º–Ω—é", "–Ω–µ –º–æ–≥—É –≤—Å–ø–æ–º–Ω–∏—Ç—å", "—É—Ç–æ—á–Ω–∏", "–∫–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", 
                "–æ –∫–∞–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö", "—á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ", "–Ω–µ –∑–Ω–∞—é"
            ]):
                print("‚úÖ EXPECTED: AI correctly shows it lacks context")
            else:
                print("‚ö†Ô∏è  UNEXPECTED: AI responded without context awareness")
                
        else:
            print(f"‚ùå ERROR: {response.status_code}")
            print(f"Response: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Exception: {e}")


if __name__ == "__main__":
    print("üß™ Context-Aware AI Testing")
    print("=" * 60)
    
    # Test with context
    test_context_aware_chat()
    
    # Test without context for comparison
    test_without_context()
    
    print("\n" + "="*60)
    print("‚úÖ Testing completed!") 