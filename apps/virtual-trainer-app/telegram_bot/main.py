"""
Virtual Trainer Telegram Bot
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LLM —Ñ—É–Ω–∫—Ü–∏–π
"""

import asyncio
import logging
import os
import sys
from typing import Dict, Any
from datetime import datetime

from telegram import Update, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend.services.llm_service import LLMService
from backend.core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π LLM —Å–µ—Ä–≤–∏—Å
llm_service = LLMService()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_sessions: Dict[int, Dict[str, Any]] = {}


def calculate_bmr(weight: int, height: int, age: int, gender: str) -> int:
    """–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞"""
    if gender.lower() in ['–º—É–∂—Å–∫–æ–π', '–º', 'male']:
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:  # –∂–µ–Ω—Å–∫–∏–π
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    
    # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
    return int(bmr * 1.55)


def get_user_session(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            "chat_history": [],
            "context": {
                "goals": [],
                "fitness_level": "–Ω–∞—á–∞–ª—å–Ω—ã–π",
                "equipment": [],
                "limitations": [],
                "nutrition_goal": "",
                "food_preferences": [],
                "allergies": [],
                "daily_calories": 0,
                "height": 0,
                "weight": 0,
                "age": 0,
                "gender": ""
            },
            "current_program": None,
            "questionnaire_state": None,  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
            "created_at": datetime.now()
        }
    return user_sessions[user_id]


# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
PROFILE_QUESTIONS = [
    {
        "key": "goals",
        "question": "üéØ *–ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n‚Ä¢ –ü–æ—Ö—É–¥–µ–Ω–∏–µ\n‚Ä¢ –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã\n‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã\n‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏\n‚Ä¢ –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è\n‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* –ø–æ—Ö—É–¥–µ–Ω–∏–µ, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã",
        "type": "list"
    },
    {
        "key": "fitness_level", 
        "question": "üí™ *–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?*\n\n‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π (–Ω–æ–≤–∏—á–æ–∫)\n‚Ä¢ –°—Ä–µ–¥–Ω–∏–π (—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å 6-12 –º–µ—Å—è—Ü–µ–≤)\n‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å –±–æ–ª–µ–µ –≥–æ–¥–∞)\n‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* —Å—Ä–µ–¥–Ω–∏–π",
        "type": "single"
    },
    {
        "key": "equipment",
        "question": "üèãÔ∏è *–ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É –≤–∞—Å –µ—Å—Ç—å?*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å\n‚Ä¢ –ì–∞–Ω—Ç–µ–ª–∏\n‚Ä¢ –®—Ç–∞–Ω–≥–∞\n‚Ä¢ –¢—É—Ä–Ω–∏–∫\n‚Ä¢ –ë—Ä—É—Å—å—è\n‚Ä¢ –≠—Å–ø–∞–Ω–¥–µ—Ä—ã\n‚Ä¢ –¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª\n‚Ä¢ –ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞\n‚Ä¢ –í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* –≥–∞–Ω—Ç–µ–ª–∏, —Ç—É—Ä–Ω–∏–∫, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å",
        "type": "list"
    },
    {
        "key": "limitations",
        "question": "‚ö†Ô∏è *–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º?*\n\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏–Ω–æ–π\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–µ–Ω—è–º–∏\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–µ—á–∞–º–∏\n‚Ä¢ –°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è\n‚Ä¢ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n‚Ä¢ –î—Ä—É–≥–æ–µ\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏–Ω–æ–π\n*–ï—Å–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ:* –Ω–µ—Ç",
        "type": "list_optional"
    },
    {
        "key": "height",
        "question": "üìè *–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?*\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* 175",
        "type": "number"
    },
    {
        "key": "weight", 
        "question": "‚öñÔ∏è *–ö–∞–∫–æ–π —É –≤–∞—Å –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?*\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* 70",
        "type": "number"
    },
    {
        "key": "age",
        "question": "üéÇ *–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?*\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* 25",
        "type": "number"
    },
    {
        "key": "gender",
        "question": "üë§ *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:*\n\n‚Ä¢ –ú—É–∂—Å–∫–æ–π\n‚Ä¢ –ñ–µ–Ω—Å–∫–∏–π\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* –º—É–∂—Å–∫–æ–π",
        "type": "single"
    },
    {
        "key": "nutrition_goal",
        "question": "üçé *–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å –ø–æ –ø–∏—Ç–∞–Ω–∏—é?*\n\n‚Ä¢ –ü–æ—Ö—É–¥–µ–Ω–∏–µ (–¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π)\n‚Ä¢ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã (–ø—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π)\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞\n‚Ä¢ –°—É—à–∫–∞ (—Å—Ç—Ä–æ–≥–∏–π –¥–µ—Ñ–∏—Ü–∏—Ç)\n‚Ä¢ –ù–µ —Å–ª–µ–∂—É –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* –ø–æ—Ö—É–¥–µ–Ω–∏–µ",
        "type": "single"
    },
    {
        "key": "food_preferences",
        "question": "ü•ó *–ö–∞–∫–∏–µ —É –≤–∞—Å –ø–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?*\n\n‚Ä¢ –û–±—ã—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\n‚Ä¢ –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ\n‚Ä¢ –í–µ–≥–∞–Ω—Å—Ç–≤–æ\n‚Ä¢ –ö–µ—Ç–æ-–¥–∏–µ—Ç–∞\n‚Ä¢ –ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–µ\n‚Ä¢ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è –¥–∏–µ—Ç–∞\n‚Ä¢ –ü–∞–ª–µ–æ\n‚Ä¢ –î—Ä—É–≥–æ–µ\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ, –Ω–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–µ\n*–ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ:* –æ–±—ã—á–Ω–æ–µ",
        "type": "list_optional"
    },
    {
        "key": "allergies",
        "question": "üö´ *–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–∏—â–µ–≤—ã–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å?*\n\n‚Ä¢ –ì–ª—é—Ç–µ–Ω\n‚Ä¢ –õ–∞–∫—Ç–æ–∑–∞\n‚Ä¢ –û—Ä–µ—Ö–∏\n‚Ä¢ –ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã\n‚Ä¢ –Ø–π—Ü–∞\n‚Ä¢ –°–æ—è\n‚Ä¢ –ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π\n‚Ä¢ –î—Ä—É–≥–æ–µ\n\n*–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:* –≥–ª—é—Ç–µ–Ω, –æ—Ä–µ—Ö–∏\n*–ï—Å–ª–∏ –Ω–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ:* –Ω–µ—Ç",
        "type": "list_optional"
    }
]


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = get_user_session(user_id)
    
    welcome_text = f"""
üèãÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Virtual Trainer, {user.first_name}!*

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-—Ç—Ä–µ–Ω–µ—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Å:
‚Ä¢ üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
‚Ä¢ üìã –°–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ üçé –ü–ª–∞–Ω–∞–º–∏ –ø–∏—Ç–∞–Ω–∏—è —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
‚Ä¢ üõí –°–ø–∏—Å–∫–∞–º–∏ –ø–æ–∫—É–ø–æ–∫
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/chat - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É
/program - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/nutrition - –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
/shopping - –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
/recipes - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã
/show - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
/profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö!
"""
    
    await update.message.reply_text(welcome_text, parse_mode='Markdown')


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã Virtual Trainer:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/chat - –†–µ–∂–∏–º —á–∞—Ç–∞ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º  
/program - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/nutrition - –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
/shopping - –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
/recipes - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã
/show - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
/profile - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ß–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –ø–∏—Ç–∞–Ω–∏–∏, —Ç–µ—Ö–Ω–∏–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –Ø —É—á–∏—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ü–µ–ª–∏.

**–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:**
–Ø —Å–æ–∑–¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π, —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

**–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:**
–°–æ–∑–¥–∞–º —Ä–∞—Ü–∏–æ–Ω –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –∞–ª–ª–µ—Ä–≥–∏–π –∏ —Ä–∞—Å—á–µ—Ç–æ–º –ë–ñ–£. –í–∫–ª—é—á–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.

**–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:**
–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏, —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.

üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç–µ, —Ç–µ–º –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –±—É–¥—É—Ç –º–æ–∏ —Å–æ–≤–µ—Ç—ã!
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º"""
    await update.message.reply_text(
        "üí¨ –†–µ–∂–∏–º —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –ø–∏—Ç–∞–Ω–∏–∏, —Ç–µ—Ö–Ω–∏–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. "
        "–Ø –æ—Ç–≤–µ—á—É —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ü–µ–ª–µ–π.\n\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )


async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    session = get_user_session(user_id)
    context_data = session["context"]
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if context_data.get('goals') and context_data.get('fitness_level') != '–Ω–∞—á–∞–ª—å–Ω—ã–π':
        profile_text = f"""
‚öôÔ∏è *–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:*

üéØ *–¶–µ–ª–∏:* {', '.join(context_data.get('goals', ['–Ω–µ —É–∫–∞–∑–∞–Ω—ã']))}
üí™ *–£—Ä–æ–≤–µ–Ω—å:* {context_data.get('fitness_level', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üèãÔ∏è *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:* {', '.join(context_data.get('equipment', ['–Ω–µ —É–∫–∞–∑–∞–Ω–æ']))}
‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:* {', '.join(context_data.get('limitations', ['–Ω–µ—Ç'])) if context_data.get('limitations') else '–Ω–µ—Ç'}

*–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?*
–í–≤–µ–¥–∏—Ç–µ "–¥–∞" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–Ω–µ—Ä—É.
"""
        await update.message.reply_text(profile_text, parse_mode='Markdown')
    else:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        await start_questionnaire(update, session)


async def start_questionnaire(update: Update, session: dict) -> None:
    """–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    session["questionnaire_state"] = {
        "current_question": 0,
        "answers": {}
    }
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    welcome_text = """
üìã *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è*

–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å! 
–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–û–ø—Ä–æ—Å–Ω–∏–∫ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "—Å—Ç–æ–ø" –¥–ª—è –≤—ã—Ö–æ–¥–∞.
"""
    await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await ask_next_question(update, session)


async def ask_next_question(update: Update, session: dict) -> None:
    """–ó–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–Ω–∏–∫–∞"""
    questionnaire = session["questionnaire_state"]
    current_q = questionnaire["current_question"]
    
    if current_q < len(PROFILE_QUESTIONS):
        question_data = PROFILE_QUESTIONS[current_q]
        question_text = f"*–í–æ–ø—Ä–æ—Å {current_q + 1} –∏–∑ {len(PROFILE_QUESTIONS)}*\n\n{question_data['question']}"
        await update.message.reply_text(question_text, parse_mode='Markdown')
    else:
        # –û–ø—Ä–æ—Å–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
        await finish_questionnaire(update, session)


async def finish_questionnaire(update: Update, session: dict) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    questionnaire = session["questionnaire_state"]
    answers = questionnaire["answers"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    for key, value in answers.items():
        session["context"][key] = value
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    session["questionnaire_state"] = None
    
    # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
    if context_data.get('height') and context_data.get('weight') and context_data.get('age'):
        bmr = calculate_bmr(
            context_data.get('weight', 0),
            context_data.get('height', 0), 
            context_data.get('age', 0),
            context_data.get('gender', '')
        )
        context_data['daily_calories'] = bmr
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = f"""
‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*

*üèãÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:*
üë§ –ü–æ–ª: {context_data.get('gender', '').title()}
üìè –†–æ—Å—Ç: {context_data.get('height', 0)} —Å–º
‚öñÔ∏è –í–µ—Å: {context_data.get('weight', 0)} –∫–≥
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {context_data.get('age', 0)} –ª–µ—Ç

*üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*
üéØ –¶–µ–ª–∏: {', '.join(context_data.get('goals', []))}
üí™ –£—Ä–æ–≤–µ–Ω—å: {context_data.get('fitness_level', '')}
üèãÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {', '.join(context_data.get('equipment', []))}
‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {', '.join(context_data.get('limitations', [])) if context_data.get('limitations') else '–Ω–µ—Ç'}

*üçé –ü–∏—Ç–∞–Ω–∏–µ:*
üéØ –¶–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è: {context_data.get('nutrition_goal', '')}
ü•ó –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {', '.join(context_data.get('food_preferences', [])) if context_data.get('food_preferences') else '–æ–±—ã—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ'}
üö´ –ê–ª–ª–µ—Ä–≥–∏–∏: {', '.join(context_data.get('allergies', [])) if context_data.get('allergies') else '–Ω–µ—Ç'}
üî• –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {context_data.get('daily_calories', 0)} –∫–∫–∞–ª

–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å:
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (/program)
‚Ä¢ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ (/nutrition)
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ (/shopping)
"""
    await update.message.reply_text(result_text, parse_mode='Markdown')


async def send_program_summary(update: Update, result: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    program = result["program"]
    summary_text = f"""
üèãÔ∏è *–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞!*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ù–µ–¥–µ–ª—å: {len(program.get('weeks', []))}
‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result['metadata']['tokens_used']}

–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–ª–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É...
"""
    await update.message.reply_text(summary_text, parse_mode='Markdown')


async def send_full_program(update: Update, session: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    program = session["current_program"]
    
    for week in program.get("weeks", []):
        week_num = week.get("week_number", 1)
        week_text = f"üìÖ *–ù–µ–¥–µ–ª—è {week_num}:*\n\n"
        
        for day in week.get("days", []):
            day_name = day.get("day_of_week", "")
            workout_type = day.get("workout_type", "")
            week_text += f"‚Ä¢ *{day_name.title()}* - {workout_type}\n"
            
            exercises = day.get("exercises", [])
            for ex in exercises:
                name = ex.get("name", "")
                sets = ex.get("sets", "")
                reps = ex.get("reps", "")
                rest = ex.get("rest", "")
                notes = ex.get("notes", "")
                
                week_text += f"  - {name}"
                if sets and reps:
                    week_text += f" ({sets}x{reps})"
                if rest:
                    week_text += f", –æ—Ç–¥—ã—Ö: {rest}"
                if notes:
                    week_text += f"\n    üí° {notes}"
                week_text += "\n"
            week_text += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç Telegram ~4000 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(week_text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = week_text.split('\n\n')
            current_part = f"üìÖ *–ù–µ–¥–µ–ª—è {week_num}:*\n\n"
            
            for part in parts[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(current_part + part + '\n\n') > 3500:
                    await update.message.reply_text(current_part, parse_mode='Markdown')
                    current_part = part + '\n\n'
                else:
                    current_part += part + '\n\n'
            
            if current_part.strip():
                await update.message.reply_text(current_part, parse_mode='Markdown')
        else:
            await update.message.reply_text(week_text, parse_mode='Markdown')
    
    # –ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_text = """
‚úÖ *–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*

*–ö–æ–º–∞–Ω–¥—ã:*
/program - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
/chat - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
/profile - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
"""
    await update.message.reply_text(final_text, parse_mode='Markdown')


async def show_program_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user_id = update.effective_user.id
    session = get_user_session(user_id)
    
    if not session.get("current_program"):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /program –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.",
            parse_mode='Markdown'
        )
        return
    
    await update.message.reply_text("üìã *–í–∞—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*", parse_mode='Markdown')
    await send_full_program(update, session)


async def program_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user_id = update.effective_user.id
    session = get_user_session(user_id)
    
    await update.message.reply_text(
        "‚è≥ –°–æ–∑–¥–∞—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 20-30 —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
        context_data = session["context"]
        client_data = {
            "goal": ", ".join(context_data.get("goals", ["–æ–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"])),
            "level": context_data.get("fitness_level", "–Ω–∞—á–∞–ª—å–Ω—ã–π"),
            "sessions_per_week": 3,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "equipment": context_data.get("equipment", ["—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å"]),
            "limitations": context_data.get("limitations", [])
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
        result = await llm_service.generate_workout_program(client_data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Å–µ—Å—Å–∏–∏
        session["current_program"] = result["program"]
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é
        await send_program_summary(update, result)
        
        # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
        await send_full_program(update, session)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )


async def nutrition_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    session = get_user_session(user_id)
    context_data = session["context"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–∏—Ç–∞–Ω–∏—è
    if not context_data.get('nutrition_goal') or not context_data.get('daily_calories'):
        await update.message.reply_text(
            "‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏.",
            parse_mode='Markdown'
        )
        return
    
    await update.message.reply_text(
        "‚è≥ –°–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-40 —Å–µ–∫—É–Ω–¥."
    )
    
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        nutrition_data = {
            "nutrition_goal": context_data.get("nutrition_goal", ""),
            "daily_calories": context_data.get("daily_calories", 2000),
            "food_preferences": context_data.get("food_preferences", []),
            "allergies": context_data.get("allergies", []),
            "weight": context_data.get("weight", 70),
            "gender": context_data.get("gender", ""),
            "fitness_goals": context_data.get("goals", [])
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        result = await llm_service.generate_nutrition_plan(nutrition_data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏
        session["current_nutrition_plan"] = result["plan"]
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        await send_nutrition_plan(update, result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )


async def shopping_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
    user_id = update.effective_user.id
    session = get_user_session(user_id)
    
    if not session.get("current_nutrition_plan"):
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /nutrition",
            parse_mode='Markdown'
        )
        return
    
    await update.message.reply_text("üìù *–°–æ—Å—Ç–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫...*", parse_mode='Markdown')
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
        nutrition_plan = session["current_nutrition_plan"]
        shopping_list = await llm_service.generate_shopping_list(nutrition_plan)
        
        await send_shopping_list(update, shopping_list)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def recipes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    session = get_user_session(user_id)
    
    if not session.get("current_nutrition_plan"):
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /nutrition",
            parse_mode='Markdown'
        )
        return
    
    await send_recipes(update, session["current_nutrition_plan"])


async def send_nutrition_plan(update: Update, result: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    plan = result["plan"]
    
    summary_text = f"""
üçé *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω!*

üìä *–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –¶–µ–ª—å: {plan.get('goal', '')}
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –≤ –¥–µ–Ω—å: {plan.get('daily_calories', 0)} –∫–∫–∞–ª
‚Ä¢ –ë–µ–ª–∫–∏: {plan.get('daily_protein', 0)}–≥
‚Ä¢ –ñ–∏—Ä—ã: {plan.get('daily_fats', 0)}–≥  
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {plan.get('daily_carbs', 0)}–≥

–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å...
"""
    await update.message.reply_text(summary_text, parse_mode='Markdown')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ –¥–Ω—è–º
    for day in plan.get("days", []):
        day_text = f"""
üìÖ *{day.get('day_name', '–î–µ–Ω—å')}*

"""
        for meal in day.get("meals", []):
            meal_name = meal.get("name", "")
            calories = meal.get("calories", 0)
            day_text += f"*{meal_name}* ({calories} –∫–∫–∞–ª)\n"
            
            for dish in meal.get("dishes", []):
                dish_name = dish.get("name", "")
                portion = dish.get("portion", "")
                day_text += f"‚Ä¢ {dish_name}"
                if portion:
                    day_text += f" - {portion}"
                day_text += "\n"
            day_text += "\n"
        
        await update.message.reply_text(day_text, parse_mode='Markdown')
    
    # –ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_text = """
‚úÖ *–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/recipes - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã
/shopping - –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
/nutrition - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω
"""
    await update.message.reply_text(final_text, parse_mode='Markdown')


async def send_shopping_list(update: Update, shopping_data: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
    shopping_list = shopping_data["shopping_list"]
    
    list_text = "üõí *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n"
    
    for category, items in shopping_list.items():
        list_text += f"*{category.title()}:*\n"
        for item in items:
            if isinstance(item, dict):
                name = item.get("name", "")
                quantity = item.get("quantity", "")
                list_text += f"‚Ä¢ {name} - {quantity}\n"
            else:
                list_text += f"‚Ä¢ {item}\n"
        list_text += "\n"
    
    await update.message.reply_text(list_text, parse_mode='Markdown')


async def send_recipes(update: Update, nutrition_plan: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    await update.message.reply_text("üë®‚Äçüç≥ *–†–µ—Ü–µ–ø—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:*\n", parse_mode='Markdown')
    
    recipe_count = 0
    for day in nutrition_plan.get("days", []):
        for meal in day.get("meals", []):
            for dish in meal.get("dishes", []):
                recipe = dish.get("recipe")
                if recipe and recipe_count < 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤
                    recipe_text = f"""
üçΩÔ∏è *{dish.get('name', '–ë–ª—é–¥–æ')}*

*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*
{recipe.get('ingredients', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}

*–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:*
{recipe.get('instructions', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

*–ë–ñ–£:* –ë: {recipe.get('protein', 0)}–≥, –ñ: {recipe.get('fats', 0)}–≥, –£: {recipe.get('carbs', 0)}–≥
*–ö–∞–ª–æ—Ä–∏–∏:* {recipe.get('calories', 0)} –∫–∫–∞–ª
"""
                    await update.message.reply_text(recipe_text, parse_mode='Markdown')
                    recipe_count += 1
    
    if recipe_count == 0:
        await update.message.reply_text("‚ùå –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –ø–∏—Ç–∞–Ω–∏—è.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º)"""
    user_id = update.effective_user.id
    user_message = update.message.text
    session = get_user_session(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    if session.get("questionnaire_state"):
        await handle_questionnaire_answer(update, session, user_message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    if user_message.lower().strip() in ['–¥–∞', '–æ–±–Ω–æ–≤–∏—Ç—å', '–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å']:
        await start_questionnaire(update, session)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç–∞—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º
    profile_update = await handle_profile_update(user_message, session)
    if profile_update:
        await update.message.reply_text(profile_update, parse_mode='Markdown')
        return
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await update.message.reply_text("ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        result = await llm_service.chat_with_virtual_trainer(
            user_message=user_message,
            chat_history=session["chat_history"],
            user_context=session["context"]
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        session["chat_history"].append({
            "role": "user",
            "content": user_message
        })
        session["chat_history"].append({
            "role": "assistant", 
            "content": result["response"]
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(session["chat_history"]) > 20:
            session["chat_history"] = session["chat_history"][-20:]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        response_text = result["response"]
        if len(response_text) > 4000:  # Telegram limit
            response_text = response_text[:4000] + "..."
        
        await update.message.reply_text(response_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        )


async def handle_questionnaire_answer(update: Update, session: dict, user_message: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–Ω–∏–∫–∞"""
    questionnaire = session["questionnaire_state"]
    current_q = questionnaire["current_question"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã—Ö–æ–¥–∞
    if user_message.lower().strip() in ['—Å—Ç–æ–ø', '–æ—Ç–º–µ–Ω–∞', '–≤—ã—Ö–æ–¥']:
        session["questionnaire_state"] = None
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /profile",
            parse_mode='Markdown'
        )
        return
    
    if current_q < len(PROFILE_QUESTIONS):
        question_data = PROFILE_QUESTIONS[current_q]
        key = question_data["key"]
        question_type = question_data["type"]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        if question_type == "list" or question_type == "list_optional":
            if user_message.lower().strip() in ['–Ω–µ—Ç', '–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', '–Ω–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π', '–æ–±—ã—á–Ω–æ–µ'] and question_type == "list_optional":
                questionnaire["answers"][key] = []
            else:
                # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                items = [item.strip().lower() for item in user_message.split(',')]
                questionnaire["answers"][key] = items
        elif question_type == "number":
            try:
                questionnaire["answers"][key] = int(user_message.strip())
            except ValueError:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 175")
                return
        else:  # single
            questionnaire["answers"][key] = user_message.strip().lower()
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        questionnaire["current_question"] += 1
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        if question_type == "list" or question_type == "list_optional":
            if questionnaire["answers"][key]:
                confirmation = f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: {', '.join(questionnaire['answers'][key])}"
            else:
                confirmation = "‚úÖ –ó–∞–ø–∏—Å–∞–ª: –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
        else:
            confirmation = f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: {questionnaire['answers'][key]}"
        
        await update.message.reply_text(confirmation)
        
        # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await ask_next_question(update, session)


async def handle_profile_update(message_text: str, session: dict) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    message_lower = message_text.lower()
    
    if any(word in message_lower for word in ['—Ü–µ–ª–∏', '—Ü–µ–ª—å']):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª–∏ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
        if ':' in message_text:
            goals_text = message_text.split(':', 1)[1].strip()
            session["context"]["goals"] = [g.strip() for g in goals_text.split(',')]
            return f"‚úÖ –¶–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(session['context']['goals'])}"
    
    elif any(word in message_lower for word in ['—É—Ä–æ–≤–µ–Ω—å']):
        if ':' in message_text:
            level = message_text.split(':', 1)[1].strip()
            session["context"]["fitness_level"] = level
            return f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {level}"
    
    elif any(word in message_lower for word in ['–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']):
        if ':' in message_text:
            equipment_text = message_text.split(':', 1)[1].strip()
            session["context"]["equipment"] = [e.strip() for e in equipment_text.split(',')]
            return f"‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {', '.join(session['context']['equipment'])}"
    
    elif any(word in message_lower for word in ['–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è']):
        if ':' in message_text:
            limitations_text = message_text.split(':', 1)[1].strip()
            session["context"]["limitations"] = [l.strip() for l in limitations_text.split(',')]
            return f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(session['context']['limitations'])}"
    
    return None


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("chat", chat_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("program", program_command))
    application.add_handler(CommandHandler("show", show_program_command))
    application.add_handler(CommandHandler("nutrition", nutrition_command))
    application.add_handler(CommandHandler("shopping", shopping_command))
    application.add_handler(CommandHandler("recipes", recipes_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    async def set_bot_commands():
        commands = [
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("chat", "–ß–∞—Ç —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º"),
            BotCommand("program", "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"),
            BotCommand("nutrition", "–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"),
            BotCommand("shopping", "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"),
            BotCommand("recipes", "–†–µ—Ü–µ–ø—Ç—ã"),
            BotCommand("show", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"),
            BotCommand("profile", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
            BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞")
        ]
        await application.bot.set_my_commands(commands)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ Virtual Trainer Bot...")
    application.run_polling(drop_pending_updates=True)


if __name__ == '__main__':
    main() 