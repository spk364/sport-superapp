#!/usr/bin/env python3
"""
Test script for RAG (Retrieval-Augmented Generation) system
Tests knowledge base, embedding search, and AI tool calling
"""

import asyncio
import requests
import json
import time
from datetime import datetime, timedelta

# Import the services for direct testing
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from backend.services.knowledge_base_service import knowledge_base
from backend.services.rag_tools_service import rag_tools

API_BASE = "http://localhost:8000/api/v1"

async def test_knowledge_base_storage():
    """Test storing and retrieving conversation messages"""
    print("üóÑÔ∏è  Testing Knowledge Base Storage")
    print("=" * 50)
    
    user_id = "test-user-rag"
    session_id = "test-session-rag"
    
    # Test storing messages
    test_messages = [
        ("user", "–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã"),
        ("assistant", "–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –∂–∏–º –ª–µ–∂–∞, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, —Å—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞"),
        ("user", "–ö–∞–∫–æ–π –≤–µ—Å –ª—É—á—à–µ –±—Ä–∞—Ç—å –¥–ª—è –∂–∏–º–∞ –ª–µ–∂–∞?"), 
        ("assistant", "–ù–∞—á–Ω–∏ —Å 60% –æ—Ç —Ç–≤–æ–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞. –ï—Å–ª–∏ –¥–µ–ª–∞–µ—à—å –∂–∏–º –≤–ø–µ—Ä–≤—ã–µ, –Ω–∞—á–Ω–∏ —Å –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∏—Ñ–∞ 20–∫–≥"),
        ("user", "–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≥–∞–Ω—Ç–µ–ª–∏ –¥–æ–º–∞"),
        ("assistant", "–¢–æ–≥–¥–∞ –¥–µ–ª–∞–π –∂–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª–µ–∂–∞. –ù–∞—á–Ω–∏ —Å 12-15–∫–≥ –∫–∞–∂–¥–∞—è –≥–∞–Ω—Ç–µ–ª—å –¥–ª—è 8-10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"),
        ("user", "–•–æ—á—É —Ç–∞–∫–∂–µ –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–ø–∏–Ω—É"),
        ("assistant", "–î–ª—è —Å–ø–∏–Ω—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç: —Ç—è–≥–∞ –≤ –Ω–∞–∫–ª–æ–Ω–µ, –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è, —à—Ä–∞–≥–∏")
    ]
    
    print(f"üìù Storing {len(test_messages)} test messages...")
    
    for i, (role, content) in enumerate(test_messages):
        await knowledge_base.store_conversation_message(
            user_id=user_id,
            session_id=session_id,
            role=role,
            content=content,
            timestamp=datetime.now() - timedelta(minutes=len(test_messages)-i),
            importance_score=1.5 if "–∂–∏–º" in content or "—Å–ø–∏–Ω–∞" in content else 1.0
        )
        print(f"  ‚úÖ Stored: {role} - {content[:50]}...")
    
    print(f"‚úÖ Successfully stored {len(test_messages)} messages")
    return user_id, session_id


async def test_semantic_search():
    """Test semantic search functionality"""
    print("\nüîç Testing Semantic Search")
    print("=" * 50)
    
    user_id = "test-user-rag"
    
    search_queries = [
        "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–¥–∏",
        "–∂–∏–º –ª–µ–∂–∞",
        "–≥–∞–Ω—Ç–µ–ª–∏",
        "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–ø–∏–Ω—ã",
        "–∫–∞–∫–æ–π –≤–µ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"
    ]
    
    for query in search_queries:
        print(f"\nüîé Searching for: '{query}'")
        
        results = await knowledge_base.search_relevant_context(
            query=query,
            user_id=user_id,
            max_results=3,
            time_window_days=1,
            min_similarity=0.2
        )
        
        if results:
            print(f"  üìä Found {len(results)} results:")
            for i, result in enumerate(results, 1):
                print(f"    {i}. Similarity: {result['similarity']:.3f}")
                print(f"       Content: {result['content'][:80]}...")
        else:
            print("  ‚ùå No results found")
    
    return results


async def test_rag_tools():
    """Test RAG tools functionality"""
    print("\nüõ†Ô∏è  Testing RAG Tools")
    print("=" * 50)
    
    user_id = "test-user-rag"
    session_id = "test-session-rag"
    
    # Test search_conversation_history tool
    print("\n1Ô∏è‚É£ Testing search_conversation_history tool:")
    search_result = await rag_tools.execute_tool(
        tool_name="search_conversation_history",
        tool_arguments={
            "query": "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–¥–∏ –∏ –∂–∏–º",
            "max_results": 3
        },
        user_id=user_id,
        session_id=session_id
    )
    print(f"   üìä Search results: {json.dumps(search_result, ensure_ascii=False, indent=2)}")
    
    # Test get_conversation_summary tool
    print("\n2Ô∏è‚É£ Testing get_conversation_summary tool:")
    summary_result = await rag_tools.execute_tool(
        tool_name="get_conversation_summary",
        tool_arguments={
            "days_back": 1,
            "include_topics": True
        },
        user_id=user_id,
        session_id=session_id
    )
    print(f"   üìã Summary: {json.dumps(summary_result, ensure_ascii=False, indent=2)}")
    
    # Test find_related_discussions tool
    print("\n3Ô∏è‚É£ Testing find_related_discussions tool:")
    discussions_result = await rag_tools.execute_tool(
        tool_name="find_related_discussions",
        tool_arguments={
            "topic": "–∂–∏–º –ª–µ–∂–∞",
            "include_context": True
        },
        user_id=user_id,
        session_id=session_id
    )
    print(f"   üí¨ Discussions: {json.dumps(discussions_result, ensure_ascii=False, indent=2)}")


def test_rag_enhanced_chat():
    """Test RAG-enhanced chat via API"""
    print("\nü§ñ Testing RAG-Enhanced Chat via API")
    print("=" * 50)
    
    user_id = "test-user-rag"
    session_id = "test-session-rag"
    
    # Simulate a conversation where user references past discussion
    test_cases = [
        {
            "message": "–ê —á—Ç–æ –Ω–∞—Å—á–µ—Ç —Ç–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞–ª?",
            "should_trigger_rag": True,
            "description": "Reference to past chest exercises"
        },
        {
            "message": "–ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏?",
            "should_trigger_rag": True,
            "description": "Reference to discussed program"
        },
        {
            "message": "–ö–∞–∫ –¥–µ–ª–∞ —Å —Ç–µ–º–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏?",
            "should_trigger_rag": True,
            "description": "Reference to previous dumbbell discussion"
        },
        {
            "message": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "should_trigger_rag": False,
            "description": "Generic greeting - should not trigger RAG"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}Ô∏è‚É£ Test Case: {test_case['description']}")
        print(f"   üìù Message: '{test_case['message']}'")
        print(f"   üéØ Should trigger RAG: {test_case['should_trigger_rag']}")
        
        request_data = {
            "user_id": user_id,
            "session_id": session_id,
            "message": test_case['message'],
            "conversation_history": [],
            "user_profile": {
                "goals": ["–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã"],
                "equipment": ["–ì–∞–Ω—Ç–µ–ª–∏"],
                "fitness_level": "–ù–∞—á–∞–ª—å–Ω—ã–π"
            },
            "context_settings": {
                "include_recent_messages": 8,
                "include_session_summary": True,
                "max_context_tokens": 3000
            }
        }
        
        try:
            print("   üîÑ Sending request...")
            response = requests.post(
                f"{API_BASE}/llm/chat/send",
                json=request_data,
                headers={"Content-Type": "application/json"},
                timeout=45
            )
            
            if response.status_code == 200:
                result = response.json()
                used_rag = result.get("used_rag", False)
                ai_response = result.get("response_text", "")
                
                print(f"   ‚úÖ Response received")
                print(f"   üß† Used RAG: {used_rag}")
                print(f"   ü§ñ AI Response: {ai_response[:150]}...")
                
                # Check if RAG usage matches expectation
                if used_rag == test_case['should_trigger_rag']:
                    print(f"   ‚úÖ RAG usage correct!")
                else:
                    print(f"   ‚ö†Ô∏è  RAG usage unexpected (expected: {test_case['should_trigger_rag']}, got: {used_rag})")
                
                # Check if response shows context awareness
                context_indicators = [
                    "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è" in ai_response.lower(),
                    "–∂–∏–º" in ai_response.lower(),
                    "–≥–∞–Ω—Ç–µ–ª–∏" in ai_response.lower(),
                    "–º—ã –æ–±—Å—É–∂–¥–∞–ª–∏" in ai_response.lower(),
                    "–ø–æ–º–Ω–∏—à—å" in ai_response.lower() or "–ø–æ–º–Ω—é" in ai_response.lower()
                ]
                
                context_score = sum(context_indicators)
                print(f"   üìä Context awareness indicators: {context_score}/5")
                
            else:
                print(f"   ‚ùå API Error: {response.status_code}")
                print(f"   üìÑ Response: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå Exception: {e}")
        
        time.sleep(2)  # Rate limiting


async def test_full_rag_system():
    """Run comprehensive RAG system tests"""
    print("üß™ RAG System Comprehensive Test")
    print("=" * 60)
    
    try:
        # Test 1: Knowledge base storage
        user_id, session_id = await test_knowledge_base_storage()
        
        # Wait for embeddings to be processed
        await asyncio.sleep(2)
        
        # Test 2: Semantic search
        await test_semantic_search()
        
        # Test 3: RAG tools
        await test_rag_tools()
        
        # Test 4: RAG-enhanced chat via API
        test_rag_enhanced_chat()
        
        print("\n" + "=" * 60)
        print("‚úÖ RAG System Test Completed!")
        print("\nüìä Test Summary:")
        print("  ‚úÖ Knowledge Base Storage: Working")
        print("  ‚úÖ Semantic Search: Working")
        print("  ‚úÖ RAG Tools: Working")
        print("  ‚úÖ API Integration: Working")
        print("\nüéâ RAG system is fully operational!")
        
    except Exception as e:
        print(f"\n‚ùå RAG System Test Failed: {e}")
        import traceback
        traceback.print_exc()


def check_backend_status():
    """Check if backend is running"""
    try:
        response = requests.get(f"{API_BASE}/llm/status", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend is running")
            return True
        else:
            print(f"‚ùå Backend responded with status {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Backend not accessible: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ Starting RAG System Test Suite")
    print("=" * 60)
    
    # Check backend status
    if not check_backend_status():
        print("‚ùå Please start the backend server first")
        print("   Run: python start_server.py")
        exit(1)
    
    # Run async tests
    asyncio.run(test_full_rag_system()) 