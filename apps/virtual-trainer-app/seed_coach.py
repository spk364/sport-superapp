import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
from sqlalchemy import select, insert
from passlib.context import CryptContext
import uuid

# Import your models
from backend.database.models import Base, User, TrainerProfile, UserRole

DATABASE_URL = "sqlite+aiosqlite:///./trainer.db"
engine = create_async_engine(DATABASE_URL)
AsyncSessionLocal = async_sessionmaker(engine, expire_on_commit=False)
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

async def seed_data():
    """Inserts test coach data into the database."""
    async with AsyncSessionLocal() as session:
        async with session.begin():
            # Check if coach already exists
            result = await session.execute(
                select(User).where(User.email == "test.coach@example.com")
            )
            existing_coach = result.scalars().first()

            if existing_coach:
                print("Test coach already exists.")
                return

            # 1. Create a new User for the coach
            user_id = str(uuid.uuid4())
            new_user = User(
                id=user_id,
                role=UserRole.TRAINER,
                email="test.coach@example.com",
                phone="+1234567890",
                password_hash=pwd_context.hash("strongpassword"),
                name="Alex Morgan",
                telegram_id="test_coach_alex",
                is_active=True,
            )
            session.add(new_user)
            await session.flush() # Flush to get the user_id if it's auto-generated by DB

            # 2. Create a TrainerProfile for the coach
            trainer_profile_id = str(uuid.uuid4())
            new_trainer_profile = TrainerProfile(
                id=trainer_profile_id,
                user_id=new_user.id,
                specializations=["Strength Training", "HIIT"],
                experience_years=8,
                bio="Certified Personal Trainer with 8 years of experience in functional strength and high-intensity interval training.",
                rating=4.9,
            )
            session.add(new_trainer_profile)
            
            print("Successfully seeded test coach data.")

async def main():
    # This is optional, but good practice to ensure tables exist
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    await seed_data()

if __name__ == "__main__":
    asyncio.run(main()) 