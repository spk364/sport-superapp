#!/usr/bin/env python3
"""
Simple test for RAG functionality
"""

import asyncio
import requests
import json
import time

API_BASE = "http://localhost:8000/api/v1"

async def test_basic_rag():
    # First, let's test if the API is up
    try:
        response = requests.get(f'{API_BASE}/llm/status', timeout=5)
        print(f'API Status: {response.status_code}')
        if response.status_code == 200:
            print('‚úÖ Backend is running')
        else:
            print('‚ùå Backend not responding properly')
            return
    except Exception as e:
        print(f'‚ùå Cannot connect to backend: {e}')
        return
    
    # Test a simple chat to create some conversation history
    print('\nü§ñ Testing RAG Chat System')
    
    user_id = 'test-rag-user'
    session_id = 'test-rag-session'
    
    # First message to establish context
    first_message = {
        'user_id': user_id,
        'session_id': session_id,
        'message': '–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã. –£ –º–µ–Ω—è –µ—Å—Ç—å –≥–∞–Ω—Ç–µ–ª–∏ –¥–æ–º–∞.',
        'user_profile': {
            'goals': ['–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã'],
            'equipment': ['–ì–∞–Ω—Ç–µ–ª–∏'],
            'fitness_level': '–ù–∞—á–∞–ª—å–Ω—ã–π'
        }
    }
    
    try:
        print('üìù Sending first message...')
        response = requests.post(
            f'{API_BASE}/llm/chat/send',
            json=first_message,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print('‚úÖ First response received')
            print(f'Response: {result.get("response_text", "")[:100]}...')
            print(f'Used RAG: {result.get("used_rag", False)}')
        else:
            print(f'‚ùå Error: {response.status_code}')
            print(f'Response: {response.text}')
            return
            
    except Exception as e:
        print(f'‚ùå Error sending first message: {e}')
        return
    
    # Wait a bit for the message to be stored
    print('\n‚è≥ Waiting for message to be stored in knowledge base...')
    time.sleep(3)
    
    # Second message that should trigger RAG
    print('\nüß† Testing RAG with contextual reference...')
    second_message = {
        'user_id': user_id,
        'session_id': session_id,
        'message': '–ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞–ª?',
        'user_profile': {
            'goals': ['–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã'],
            'equipment': ['–ì–∞–Ω—Ç–µ–ª–∏'],
            'fitness_level': '–ù–∞—á–∞–ª—å–Ω—ã–π'
        }
    }
    
    try:
        response = requests.post(
            f'{API_BASE}/llm/chat/send',
            json=second_message,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            used_rag = result.get('used_rag', False)
            print(f'‚úÖ Second response received')
            print(f'üß† Used RAG: {used_rag}')
            print(f'Response: {result.get("response_text", "")[:200]}...')
            
            if used_rag:
                print('\nüéâ RAG System is working!')
                print('‚úÖ AI successfully used conversation history to provide contextual response')
            else:
                print('\n‚ö†Ô∏è  RAG not triggered')
                print('   This could be normal if the trigger conditions were not met')
                print('   The system still works, just didn\'t detect need for historical context')
        else:
            print(f'‚ùå Error: {response.status_code}')
            print(f'Response: {response.text}')
            
    except Exception as e:
        print(f'‚ùå Error sending second message: {e}')

    # Third message with more explicit RAG trigger
    print('\nüîç Testing with explicit RAG trigger...')
    third_message = {
        'user_id': user_id,
        'session_id': session_id,
        'message': '–ü–æ–º–Ω–∏—à—å, –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏? –ß—Ç–æ –µ—â–µ –º–æ–∂–µ—à—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å?',
        'user_profile': {
            'goals': ['–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã'],
            'equipment': ['–ì–∞–Ω—Ç–µ–ª–∏'],
            'fitness_level': '–ù–∞—á–∞–ª—å–Ω—ã–π'
        }
    }
    
    try:
        response = requests.post(
            f'{API_BASE}/llm/chat/send',
            json=third_message,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            used_rag = result.get('used_rag', False)
            print(f'‚úÖ Third response received')
            print(f'üß† Used RAG: {used_rag}')
            print(f'Response: {result.get("response_text", "")[:200]}...')
            
            if used_rag:
                print('\nüéâ RAG triggered successfully!')
            else:
                print('\nüìä RAG trigger analysis:')
                print('   - Message contained explicit memory reference: "–ü–æ–º–Ω–∏—à—å"')
                print('   - Message referenced past discussion: "–º—ã –æ–±—Å—É–∂–¥–∞–ª–∏"')
                print('   - This should have triggered RAG search')
        else:
            print(f'‚ùå Error: {response.status_code}')
            print(f'Response: {response.text}')
            
    except Exception as e:
        print(f'‚ùå Error sending third message: {e}')

if __name__ == "__main__":
    print("üöÄ Starting Basic RAG Test")
    print("=" * 40)
    
    asyncio.run(test_basic_rag())
    
    print("\n" + "=" * 40)
    print("‚úÖ Test completed") 