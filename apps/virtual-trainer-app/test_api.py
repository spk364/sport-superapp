"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API Virtual Trainer
"""
import asyncio
import json
from backend.services.llm_service import LLMService

async def test_chat():
    """–¢–µ—Å—Ç —á–∞—Ç–∞ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–µ—Ä–æ–º"""
    llm_service = LLMService()
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞...")
    
    try:
        # –¢–µ—Å—Ç —á–∞—Ç–∞
        result = await llm_service.chat_with_virtual_trainer(
            user_message="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è?",
            user_context={
                "goals": ["—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞"],
                "fitness_level": "–Ω–∞—á–∞–ª—å–Ω—ã–π"
            }
        )
        
        print("‚úÖ –ß–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"–û—Ç–≤–µ—Ç: {result['response'][:100]}...")
        print(f"–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result['metadata']['tokens_used']}")
        print(f"–ú–æ–¥–µ–ª—å: {result['metadata']['model']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")

async def test_program_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    llm_service = LLMService()
    
    print("\nüèãÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
    
    try:
        client_data = {
            "goal": "—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",
            "level": "–Ω–∞—á–∞–ª—å–Ω—ã–π", 
            "sessions_per_week": 3,
            "equipment": ["–≥–∞–Ω—Ç–µ–ª–∏"],
            "limitations": []
        }
        
        result = await llm_service.generate_workout_program(client_data)
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"–ù–µ–¥–µ–ª—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {len(result['program']['weeks'])}")
        print(f"–ü–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {result['program']['weeks'][0]['days'][0]['exercises'][0]['name']}")
        print(f"–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result['metadata']['tokens_used']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")

async def test_notification():
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    llm_service = LLMService()
    
    print("\nüîî –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    try:
        result = await llm_service.generate_notification(
            notification_type="workout_reminder",
            user_context={
                "name": "–ò–≤–∞–Ω",
                "next_workout": "19:00",
                "workout_type": "—Å–∏–ª–æ–≤–∞—è"
            }
        )
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {result['message']}")
        print(f"–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result['metadata']['tokens_used']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã Virtual Trainer LLM...")
    print("=" * 50)
    
    await test_chat()
    await test_program_generation() 
    await test_notification()
    
    print("\n" + "=" * 50)
    print("‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 