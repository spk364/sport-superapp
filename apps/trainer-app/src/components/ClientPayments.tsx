import React from "react"; import { useAppStore } from "../stores/appStore"; import { CreditCardIcon, ExclamationTriangleIcon } from "@heroicons/react/24/outline"; import { format, isAfter, isBefore, addDays } from "date-fns"; import { ru } from "date-fns/locale"; interface ClientPaymentsProps { clientId: string; } const ClientPayments: React.FC<ClientPaymentsProps> = ({ clientId }) => { const { payments } = useAppStore(); const clientPayments = payments.filter(p => p.clientId === clientId); const getStatusColor = (status: string, expiryDate?: Date) => { if (status === "overdue") return "bg-red-100 text-red-800"; if (status === "pending") return "bg-yellow-100 text-yellow-800"; if (expiryDate && isAfter(new Date(), expiryDate)) return "bg-red-100 text-red-800"; if (expiryDate && isBefore(new Date(), addDays(expiryDate, -7))) return "bg-yellow-100 text-yellow-800"; return "bg-green-100 text-green-800"; }; const getStatusText = (status: string, expiryDate?: Date) => { if (status === "overdue") return "Просрочен"; if (status === "pending") return "В ожидании"; if (expiryDate && isAfter(new Date(), expiryDate)) return "Истек"; if (expiryDate && isBefore(new Date(), addDays(expiryDate, -7))) return "Скоро истечет"; return "Активен"; }; const getMembershipTypeText = (type: string) => { switch (type) { case "monthly": return "Месячный"; case "quarterly": return "Квартальный"; case "yearly": return "Годовой"; case "session": return "Разовое занятие"; default: return type; } }; const totalPaid = clientPayments.reduce((sum, payment) => sum + payment.amount, 0); const overduePayments = clientPayments.filter(p => p.status === "overdue" || (p.expiryDate && isAfter(new Date(), p.expiryDate))); const activePayment = clientPayments.find(p => p.status === "paid" && p.expiryDate && isAfter(p.expiryDate, new Date())); if (clientPayments.length === 0) { return ( <div className="p-4"> <div className="text-center py-8"> <CreditCardIcon className="mx-auto h-12 w-12 text-telegram-hint" /> <h3 className="mt-2 text-sm font-medium text-telegram-text">Нет платежей</h3> <p className="mt-1 text-sm text-telegram-hint">История платежей будет отображаться здесь</p> </div> </div> ); } return ( <div className="p-4"> {overduePayments.length > 0 && ( <div className="telegram-card mb-4 border-l-4 border-red-500"> <div className="flex items-center space-x-2"> <ExclamationTriangleIcon className="w-5 h-5 text-red-500" /> <h3 className="text-sm font-medium text-red-800">Требует внимания</h3> </div> <p className="text-sm text-red-700 mt-1"> {overduePayments.length} просроченных платежей </p> </div> )} <div className="telegram-card mb-4"> <h3 className="text-lg font-medium text-telegram-text mb-2">Сводка по платежам</h3> <div className="grid grid-cols-2 gap-4"> <div> <div className="text-2xl font-bold text-telegram-button">{totalPaid.toLocaleString()} ₽</div> <div className="text-xs text-telegram-hint">Всего оплачено</div> </div> <div> <div className="text-2xl font-bold text-telegram-text">{clientPayments.length}</div> <div className="text-xs text-telegram-hint">Транзакций</div> </div> </div> {activePayment && ( <div className="mt-3 p-3 bg-green-50 rounded"> <div className="text-sm font-medium text-green-800">Активный абонемент</div> <div className="text-sm text-green-700"> {getMembershipTypeText(activePayment.membershipType)} до{" "} {activePayment.expiryDate && format(activePayment.expiryDate, "d MMMM yyyy", { locale: ru })} </div> </div> )} </div> <div className="space-y-3"> <h3 className="text-lg font-medium text-telegram-text">История платежей</h3> {clientPayments.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).map((payment) => ( <div key={payment.id} className="telegram-card"> <div className="flex items-start justify-between"> <div className="flex-1"> <h4 className="text-sm font-medium text-telegram-text"> {getMembershipTypeText(payment.membershipType)} </h4> <p className="text-xs text-telegram-hint"> {format(new Date(payment.date), "d MMMM yyyy", { locale: ru })} </p> {payment.expiryDate && ( <p className="text-xs text-telegram-hint"> Действует до{" "} {format(payment.expiryDate, "d MMMM yyyy", { locale: ru })} </p> )} {payment.description && ( <p className="text-xs text-telegram-hint mt-1">{payment.description}</p> )} </div> <div className="text-right"> <div className="text-lg font-bold text-telegram-text"> {payment.amount.toLocaleString()} ₽ </div> <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(payment.status, payment.expiryDate)}`} > {getStatusText(payment.status, payment.expiryDate)} </span> </div> </div> </div> ))} </div> </div> ); }; export default ClientPayments;
