import React from "react"; import { CalendarIcon, CheckCircleIcon, XCircleIcon } from "@heroicons/react/24/outline"; import { useAppStore } from "../stores/appStore"; import { format, startOfWeek, endOfWeek, isWithinInterval } from "date-fns"; import { ru } from "date-fns/locale"; const AttendanceOverview: React.FC = () => { const { sessions, clients } = useAppStore(); const now = new Date(); const weekStart = startOfWeek(now, { weekStartsOn: 1 }); const weekEnd = endOfWeek(now, { weekStartsOn: 1 }); const thisWeekSessions = sessions.filter(session => isWithinInterval(new Date(session.date), { start: weekStart, end: weekEnd }) ); const attendedSessions = thisWeekSessions.filter(s => s.attendance === "present"); const missedSessions = thisWeekSessions.filter(s => s.attendance === "absent"); const attendanceRate = thisWeekSessions.length > 0 ? Math.round((attendedSessions.length / thisWeekSessions.length) * 100) : 0; const getClientName = (clientId: string) => { const client = clients.find(c => c.id === clientId); return client?.name || "Неизвестный клиент"; }; if (sessions.length === 0) { return ( <div className="p-4"> <div className="text-center py-8"> <CalendarIcon className="mx-auto h-12 w-12 text-telegram-hint" /> <h3 className="mt-2 text-sm font-medium text-telegram-text">Нет записей о тренировках</h3> <p className="mt-1 text-sm text-telegram-hint">Записи о посещениях будут отображаться здесь</p> </div> </div> ); } return ( <div className="p-4"> <div className="telegram-card mb-4"> <h3 className="text-lg font-medium text-telegram-text mb-3">Статистика за эту неделю</h3> <div className="grid grid-cols-3 gap-4 text-center"> <div> <div className="text-2xl font-bold text-green-600">{attendedSessions.length}</div> <div className="text-xs text-telegram-hint">Присутствовали</div> </div> <div> <div className="text-2xl font-bold text-red-600">{missedSessions.length}</div> <div className="text-xs text-telegram-hint">Пропустили</div> </div> <div> <div className="text-2xl font-bold text-telegram-button">{attendanceRate}%</div> <div className="text-xs text-telegram-hint">Посещаемость</div> </div> </div> </div> <div className="space-y-3"> <h3 className="text-lg font-medium text-telegram-text">Последние тренировки</h3> {sessions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, 10).map((session) => ( <div key={session.id} className="telegram-card"> <div className="flex items-center space-x-3"> {session.attendance === "present" ? ( <CheckCircleIcon className="w-6 h-6 text-green-500" /> ) : ( <XCircleIcon className="w-6 h-6 text-red-500" /> )} <div className="flex-1"> <h4 className="text-sm font-medium text-telegram-text"> {getClientName(session.clientId)} - {session.trainingType} </h4> <p className="text-xs text-telegram-hint"> {format(new Date(session.date), "d MMMM yyyy, HH:mm", { locale: ru })} </p> </div> <span className={`text-xs px-2 py-1 rounded ${ session.attendance === "present" ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800" }`} > {session.attendance === "present" ? "Присутствовал" : "Отсутствовал"} </span> </div> </div> ))} </div> </div> ); }; export default AttendanceOverview;
