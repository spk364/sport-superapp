import React from "react"; import { CreditCardIcon, ExclamationTriangleIcon } from "@heroicons/react/24/outline"; import { useAppStore } from "../stores/appStore"; import { format, isAfter, addDays } from "date-fns"; import { ru } from "date-fns/locale"; const PaymentOverview: React.FC = () => { const { payments, clients } = useAppStore(); const overduePayments = payments.filter(p => p.status === "overdue" || (p.expiryDate && isAfter(new Date(), p.expiryDate)) ); const expiringSoon = payments.filter(p => p.expiryDate && isAfter(addDays(new Date(), 7), p.expiryDate) && !isAfter(new Date(), p.expiryDate) ); const thisMonthRevenue = payments.filter(p => new Date(p.date).getMonth() === new Date().getMonth() && new Date(p.date).getFullYear() === new Date().getFullYear() ).reduce((sum, p) => sum + p.amount, 0); const getClientName = (clientId: string) => { const client = clients.find(c => c.id === clientId); return client?.name || "Неизвестный клиент"; }; if (payments.length === 0) { return ( <div className="p-4"> <div className="text-center py-8"> <CreditCardIcon className="mx-auto h-12 w-12 text-telegram-hint" /> <h3 className="mt-2 text-sm font-medium text-telegram-text">Нет платежей</h3> <p className="mt-1 text-sm text-telegram-hint">История платежей будет отображаться здесь</p> </div> </div> ); } return ( <div className="p-4"> <div className="telegram-card mb-4"> <h3 className="text-lg font-medium text-telegram-text mb-3">Финансовая сводка</h3> <div className="grid grid-cols-3 gap-4 text-center"> <div> <div className="text-2xl font-bold text-green-600">{thisMonthRevenue.toLocaleString()} ₽</div> <div className="text-xs text-telegram-hint">Доход за месяц</div> </div> <div> <div className="text-2xl font-bold text-red-600">{overduePayments.length}</div> <div className="text-xs text-telegram-hint">Просрочено</div> </div> <div> <div className="text-2xl font-bold text-yellow-600">{expiringSoon.length}</div> <div className="text-xs text-telegram-hint">Истекает скоро</div> </div> </div> </div> {overduePayments.length > 0 && ( <div className="telegram-card mb-4 border-l-4 border-red-500"> <div className="flex items-center space-x-2 mb-2"> <ExclamationTriangleIcon className="w-5 h-5 text-red-500" /> <h3 className="text-sm font-medium text-red-800">Просроченные платежи</h3> </div> <div className="space-y-2"> {overduePayments.slice(0, 3).map((payment) => ( <div key={payment.id} className="flex justify-between items-center text-sm"> <span className="text-red-700">{getClientName(payment.clientId)}</span> <span className="text-red-800 font-medium">{payment.amount.toLocaleString()} ₽</span> </div> ))} {overduePayments.length > 3 && ( <p className="text-xs text-red-600">и еще {overduePayments.length - 3} клиентов</p> )} </div> </div> )} {expiringSoon.length > 0 && ( <div className="telegram-card mb-4 border-l-4 border-yellow-500"> <div className="flex items-center space-x-2 mb-2"> <ExclamationTriangleIcon className="w-5 h-5 text-yellow-500" /> <h3 className="text-sm font-medium text-yellow-800">Абонементы истекают скоро</h3> </div> <div className="space-y-2"> {expiringSoon.slice(0, 3).map((payment) => ( <div key={payment.id} className="flex justify-between items-center text-sm"> <span className="text-yellow-700">{getClientName(payment.clientId)}</span> <span className="text-yellow-800 text-xs"> {payment.expiryDate && format(payment.expiryDate, "d MMM", { locale: ru })} </span> </div> ))} </div> </div> )} <div className="space-y-3"> <h3 className="text-lg font-medium text-telegram-text">Последние платежи</h3> {payments.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, 10).map((payment) => ( <div key={payment.id} className="telegram-card"> <div className="flex items-center justify-between"> <div> <h4 className="text-sm font-medium text-telegram-text"> {getClientName(payment.clientId)} </h4> <p className="text-xs text-telegram-hint"> {format(new Date(payment.date), "d MMMM yyyy", { locale: ru })} </p> <p className="text-xs text-telegram-hint">{payment.description}</p> </div> <div className="text-right"> <div className="text-lg font-bold text-telegram-text"> {payment.amount.toLocaleString()} ₽ </div> <span className={`text-xs px-2 py-1 rounded ${ payment.status === "paid" ? "bg-green-100 text-green-800" : payment.status === "pending" ? "bg-yellow-100 text-yellow-800" : "bg-red-100 text-red-800" }`} > {payment.status === "paid" ? "Оплачено" : payment.status === "pending" ? "В ожидании" : "Просрочено"} </span> </div> </div> </div> ))} </div> </div> ); }; export default PaymentOverview;
