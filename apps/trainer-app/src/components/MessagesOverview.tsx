import React from "react"; import { ChatBubbleLeftIcon } from "@heroicons/react/24/outline"; import { useAppStore } from "../stores/appStore"; import { format } from "date-fns"; import { ru } from "date-fns/locale"; const MessagesOverview: React.FC = () => { const { messages, clients, setSelectedClient } = useAppStore(); const unreadMessages = messages.filter(m => !m.read && m.senderType === "client"); const recentMessages = messages.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).slice(0, 10); const getClientName = (clientId: string) => { const client = clients.find(c => c.id === clientId); return client?.name || "Неизвестный клиент"; }; const getClientAvatar = (clientId: string) => { const client = clients.find(c => c.id === clientId); return client?.avatar; }; const handleMessageClick = (clientId: string) => { setSelectedClient(clientId); }; if (messages.length === 0) { return ( <div className="p-4"> <div className="text-center py-8"> <ChatBubbleLeftIcon className="mx-auto h-12 w-12 text-telegram-hint" /> <h3 className="mt-2 text-sm font-medium text-telegram-text">Нет сообщений</h3> <p className="mt-1 text-sm text-telegram-hint">Сообщения от клиентов будут отображаться здесь</p> </div> </div> ); } return ( <div className="p-4"> <div className="telegram-card mb-4"> <h3 className="text-lg font-medium text-telegram-text mb-3">Статистика сообщений</h3> <div className="grid grid-cols-2 gap-4 text-center"> <div> <div className="text-2xl font-bold text-red-600">{unreadMessages.length}</div> <div className="text-xs text-telegram-hint">Непрочитанных</div> </div> <div> <div className="text-2xl font-bold text-telegram-text">{messages.length}</div> <div className="text-xs text-telegram-hint">Всего сообщений</div> </div> </div> </div> {unreadMessages.length > 0 && ( <div className="telegram-card mb-4 border-l-4 border-red-500"> <h3 className="text-sm font-medium text-red-800 mb-2">Непрочитанные сообщения</h3> <div className="space-y-2"> {unreadMessages.slice(0, 3).map((message) => ( <div key={message.id} onClick={() => handleMessageClick(message.clientId)} className="flex items-center space-x-3 cursor-pointer hover:bg-gray-50 p-2 rounded" > {getClientAvatar(message.clientId) ? ( <img src={getClientAvatar(message.clientId)} alt="" className="w-8 h-8 rounded-full object-cover" /> ) : ( <div className="w-8 h-8 rounded-full bg-telegram-button flex items-center justify-center"> <span className="text-telegram-button-text text-xs font-medium"> {getClientName(message.clientId).charAt(0)} </span> </div> )} <div className="flex-1 min-w-0"> <p className="text-sm font-medium text-telegram-text truncate"> {getClientName(message.clientId)} </p> <p className="text-xs text-telegram-hint truncate">{message.message}</p> </div> <span className="text-xs text-telegram-hint"> {format(new Date(message.timestamp), "HH:mm")} </span> </div> ))} {unreadMessages.length > 3 && ( <p className="text-xs text-red-600">и еще {unreadMessages.length - 3} сообщений</p> )} </div> </div> )} <div className="space-y-3"> <h3 className="text-lg font-medium text-telegram-text">Последние сообщения</h3> {recentMessages.map((message) => ( <div key={message.id} onClick={() => handleMessageClick(message.clientId)} className="telegram-card cursor-pointer hover:shadow-md transition-shadow" > <div className="flex items-start space-x-3"> {getClientAvatar(message.clientId) ? ( <img src={getClientAvatar(message.clientId)} alt="" className="w-10 h-10 rounded-full object-cover" /> ) : ( <div className="w-10 h-10 rounded-full bg-telegram-button flex items-center justify-center"> <span className="text-telegram-button-text text-sm font-medium"> {getClientName(message.clientId).charAt(0)} </span> </div> )} <div className="flex-1 min-w-0"> <div className="flex items-center justify-between"> <h4 className="text-sm font-medium text-telegram-text"> {getClientName(message.clientId)} </h4> <span className="text-xs text-telegram-hint"> {format(new Date(message.timestamp), "d MMM, HH:mm", { locale: ru })} </span> </div> <p className="text-sm text-telegram-text mt-1">{message.message}</p> <div className="flex items-center justify-between mt-2"> <span className={`text-xs px-2 py-1 rounded ${ message.senderType === "client" ? "bg-blue-100 text-blue-800" : "bg-green-100 text-green-800" }`} > {message.senderType === "client" ? "От клиента" : "От тренера"} </span> {!message.read && message.senderType === "client" && ( <span className="w-2 h-2 bg-red-500 rounded-full"></span> )} </div> </div> </div> </div> ))} </div> </div> ); }; export default MessagesOverview;
