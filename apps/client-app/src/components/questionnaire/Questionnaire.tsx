import React, { useState, useEffect } from 'react';
import { ChevronLeftIcon, ChevronRightIcon, CheckIcon } from '@heroicons/react/24/outline';

interface Question {
  key: string;
  question: string;
  type: 'single' | 'list' | 'list_optional' | 'number' | 'text';
  options?: string[];
  emoji: string;
}

interface QuestionnaireProps {
  onComplete: (answers: Record<string, any>) => void;
  onClose: () => void;
}

const PROFILE_QUESTIONS: Question[] = [
  {
    key: "goals",
    question: "–ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
    type: "list",
    emoji: "üéØ",
    options: [
      "–ü–æ—Ö—É–¥–µ–Ω–∏–µ",
      "–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
      "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã",
      "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã",
      "–£–ª—É—á—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏",
      "–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è",
      "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º"
    ]
  },
  {
    key: "fitness_level",
    question: "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?",
    type: "single",
    emoji: "üí™",
    options: [
      "–ù–∞—á–∞–ª—å–Ω—ã–π (–Ω–æ–≤–∏—á–æ–∫)",
      "–°—Ä–µ–¥–Ω–∏–π (—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å 6-12 –º–µ—Å—è—Ü–µ–≤)",
      "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å –±–æ–ª–µ–µ –≥–æ–¥–∞)",
      "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π"
    ]
  },
  {
    key: "equipment",
    question: "–ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É –≤–∞—Å –µ—Å—Ç—å?",
    type: "list",
    emoji: "üèãÔ∏è",
    options: [
      "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å",
      "–ì–∞–Ω—Ç–µ–ª–∏",
      "–®—Ç–∞–Ω–≥–∞",
      "–¢—É—Ä–Ω–∏–∫",
      "–ë—Ä—É—Å—å—è",
      "–≠—Å–ø–∞–Ω–¥–µ—Ä—ã",
      "–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª",
      "–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞",
      "–í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä"
    ]
  },
  {
    key: "limitations",
    question: "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º?",
    type: "list_optional",
    emoji: "‚ö†Ô∏è",
    options: [
      "–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏–Ω–æ–π",
      "–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–ª–µ–Ω—è–º–∏",
      "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–µ—á–∞–º–∏",
      "–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è",
      "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
      "–î—Ä—É–≥–æ–µ"
    ]
  },
  {
    key: "height",
    question: "–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?",
    type: "number",
    emoji: "üìè"
  },
  {
    key: "weight",
    question: "–ö–∞–∫–æ–π —É –≤–∞—Å –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?",
    type: "number",
    emoji: "‚öñÔ∏è"
  },
  {
    key: "age",
    question: "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
    type: "number",
    emoji: "üéÇ"
  },
  {
    key: "gender",
    question: "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
    type: "single",
    emoji: "üë§",
    options: ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]
  },
  {
    key: "nutrition_goal",
    question: "–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å –ø–æ –ø–∏—Ç–∞–Ω–∏—é?",
    type: "single",
    emoji: "üçé",
    options: [
      "–ü–æ—Ö—É–¥–µ–Ω–∏–µ (–¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π)",
      "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã (–ø—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π)",
      "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞",
      "–°—É—à–∫–∞ (—Å—Ç—Ä–æ–≥–∏–π –¥–µ—Ñ–∏—Ü–∏—Ç)",
      "–ù–µ —Å–ª–µ–∂—É –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º"
    ]
  },
  {
    key: "food_preferences",
    question: "–ö–∞–∫–∏–µ —É –≤–∞—Å –ø–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?",
    type: "list_optional",
    emoji: "ü•ó",
    options: [
      "–û–±—ã—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
      "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ",
      "–í–µ–≥–∞–Ω—Å—Ç–≤–æ",
      "–ö–µ—Ç–æ-–¥–∏–µ—Ç–∞",
      "–ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–µ",
      "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è –¥–∏–µ—Ç–∞",
      "–ü–∞–ª–µ–æ",
      "–î—Ä—É–≥–æ–µ"
    ]
  },
  {
    key: "allergies",
    question: "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–∏—â–µ–≤—ã–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å?",
    type: "list_optional",
    emoji: "üö´",
    options: [
      "–ì–ª—é—Ç–µ–Ω",
      "–õ–∞–∫—Ç–æ–∑–∞",
      "–û—Ä–µ—Ö–∏",
      "–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
      "–Ø–π—Ü–∞",
      "–°–æ—è",
      "–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π",
      "–î—Ä—É–≥–æ–µ"
    ]
  }
];

export const Questionnaire: React.FC<QuestionnaireProps> = ({ onComplete, onClose }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<string, any>>({});
  const [selectedOptions, setSelectedOptions] = useState<string[]>([]);
  const [numberValue, setNumberValue] = useState('');
  const [error, setError] = useState<string | null>(null);

  const question = PROFILE_QUESTIONS[currentQuestion];
  const progress = ((currentQuestion + 1) / PROFILE_QUESTIONS.length) * 100;

  useEffect(() => {
    // Reset local state when question changes
    setSelectedOptions([]);
    setNumberValue('');
    setError(null);

    // Load existing answer if any
    const existingAnswer = answers[question.key];
    if (existingAnswer !== undefined) {
      if (question.type === 'number') {
        setNumberValue(existingAnswer.toString());
      } else if (question.type === 'single') {
        setSelectedOptions([existingAnswer]);
      } else if (Array.isArray(existingAnswer)) {
        setSelectedOptions(existingAnswer);
      }
    }
  }, [currentQuestion, question.key, question.type, answers]);

  const handleOptionSelect = (option: string) => {
    if (question.type === 'single') {
      setSelectedOptions([option]);
    } else {
      setSelectedOptions(prev => 
        prev.includes(option) 
          ? prev.filter(o => o !== option)
          : [...prev, option]
      );
    }
    setError(null);
  };

  const handleNumberChange = (value: string) => {
    setNumberValue(value);
    setError(null);
  };

  const validateAnswer = (): boolean => {
    if (question.type === 'number') {
      const num = parseInt(numberValue);
      if (isNaN(num) || num <= 0) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');
        return false;
      }
      
      // Add specific validation for each number field
      if (question.key === 'age') {
        if (num < 10 || num > 100) {
          setError('–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100 –ª–µ—Ç');
          return false;
        }
      } else if (question.key === 'height') {
        if (num < 100 || num > 250) {
          setError('–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º');
          return false;
        }
      } else if (question.key === 'weight') {
        if (num < 30 || num > 300) {
          setError('–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥');
          return false;
        }
      }
    } else if (question.type === 'single' || question.type === 'list') {
      if (selectedOptions.length === 0) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç');
        return false;
      }
    }
    return true;
  };

  const saveCurrentAnswer = () => {
    let answer: number | string | string[];
    if (question.type === 'number') {
      answer = parseInt(numberValue);
    } else if (question.type === 'single') {
      answer = selectedOptions[0];
    } else {
      answer = selectedOptions;
    }

    setAnswers(prev => ({
      ...prev,
      [question.key]: answer
    }));
  };

  const handleNext = () => {
    if (!validateAnswer()) return;
    
    saveCurrentAnswer();

    if (currentQuestion === PROFILE_QUESTIONS.length - 1) {
      // Complete questionnaire
      const finalAnswers = {
        ...answers,
        [question.key]: question.type === 'number' 
          ? parseInt(numberValue)
          : question.type === 'single' 
            ? selectedOptions[0]
            : selectedOptions
      };
      onComplete(finalAnswers);
    } else {
      setCurrentQuestion(prev => prev + 1);
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      saveCurrentAnswer();
      setCurrentQuestion(prev => prev - 1);
    }
  };

  const renderQuestionContent = () => {
    if (question.type === 'number') {
      let placeholder = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ...";
      let inputMode: "numeric" | "text" = "numeric";
      
      if (question.key === 'age') {
        placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: 25";
      } else if (question.key === 'height') {
        placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: 175";
      } else if (question.key === 'weight') {
        placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: 70";
      }
      
      return (
        <div className="space-y-4">
          <input
            type="number"
            inputMode={inputMode}
            value={numberValue}
            onChange={(e) => handleNumberChange(e.target.value)}
            className="w-full px-6 py-4 text-xl text-center bg-white bg-opacity-20 backdrop-blur-md rounded-xl border border-white border-opacity-30 text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:bg-opacity-30"
            placeholder={placeholder}
            min="1"
            autoFocus
          />
          {question.key === 'age' && (
            <p className="text-center text-sm text-blue-200">
              –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö (–æ—Ç 10 –¥–æ 100)
            </p>
          )}
          {question.key === 'height' && (
            <p className="text-center text-sm text-blue-200">
              –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 100 –¥–æ 250)
            </p>
          )}
          {question.key === 'weight' && (
            <p className="text-center text-sm text-blue-200">
              –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 30 –¥–æ 300)
            </p>
          )}
        </div>
      );
    }

    return (
      <div className="space-y-3">
        {question.options?.map((option, index) => (
          <button
            key={option}
            onClick={() => handleOptionSelect(option)}
            className={`w-full p-4 text-left rounded-xl border transition-all duration-200 ${
              selectedOptions.includes(option)
                ? 'bg-blue-500 bg-opacity-80 border-blue-400 text-white'
                : 'bg-white bg-opacity-10 backdrop-blur-md border-white border-opacity-30 text-white hover:bg-opacity-20'
            }`}
          >
            <div className="flex items-center justify-between">
              <span className="flex-1">{option}</span>
              {selectedOptions.includes(option) && (
                <CheckIcon className="w-5 h-5 text-white" />
              )}
            </div>
          </button>
        ))}
      </div>
    );
  };

  return (
    <div className="fixed inset-0 bg-gradient-to-br from-blue-600 to-purple-700 z-50 overflow-hidden">
      <div className="flex flex-col h-full">
        {/* Header */}
        <div className="flex items-center justify-between p-4 bg-black bg-opacity-20">
          <button
            onClick={onClose}
            className="p-2 rounded-lg bg-white bg-opacity-20 backdrop-blur-md"
          >
            <ChevronLeftIcon className="w-6 h-6 text-white" />
          </button>
          <div className="text-center">
            <div className="text-white text-sm font-medium">
              {currentQuestion + 1} –∏–∑ {PROFILE_QUESTIONS.length}
            </div>
            <div className="w-48 h-2 bg-white bg-opacity-30 rounded-full mt-1">
              <div 
                className="h-full bg-white rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              />
            </div>
          </div>
          <div className="w-10" /> {/* Spacer */}
        </div>

        {/* Question Content */}
        <div className="flex-1 p-6 overflow-y-auto">
          <div className="max-w-lg mx-auto">
            {/* Question */}
            <div className="text-center mb-8">
              <div className="text-6xl mb-4">{question.emoji}</div>
              <h2 className="text-2xl font-bold text-white leading-tight">
                {question.question}
              </h2>
              {question.type === 'list_optional' && (
                <p className="text-blue-200 text-sm mt-2">
                  –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                </p>
              )}
              {question.type === 'list' && (
                <p className="text-blue-200 text-sm mt-2">
                  –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                </p>
              )}
            </div>

            {/* Answer Options */}
            {renderQuestionContent()}

            {/* Error Message */}
            {error && (
              <div className="mt-4 p-3 bg-red-500 bg-opacity-80 rounded-lg">
                <p className="text-white text-sm text-center">{error}</p>
              </div>
            )}
          </div>
        </div>

        {/* Navigation */}
        <div className="p-6 bg-black bg-opacity-20">
          <div className="max-w-lg mx-auto flex items-center justify-between">
            <button
              onClick={handlePrevious}
              disabled={currentQuestion === 0}
              className={`px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                currentQuestion === 0
                  ? 'bg-gray-500 bg-opacity-50 text-gray-300 cursor-not-allowed'
                  : 'bg-white bg-opacity-20 backdrop-blur-md text-white hover:bg-opacity-30'
              }`}
            >
              –ù–∞–∑–∞–¥
            </button>

            <button
              onClick={handleNext}
              className="px-8 py-3 bg-white text-blue-600 rounded-xl font-medium hover:bg-gray-100 transition-all duration-200 flex items-center gap-2"
            >
              {currentQuestion === PROFILE_QUESTIONS.length - 1 ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–î–∞–ª–µ–µ'}
              <ChevronRightIcon className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};