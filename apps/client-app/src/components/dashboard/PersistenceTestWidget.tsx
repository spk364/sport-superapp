import React from 'react';
import { useAppStore } from '../../store';
import { 
  CheckCircleIcon,
  ExclamationTriangleIcon,
  InformationCircleIcon,
} from '@heroicons/react/24/outline';

/**
 * –í–∏–¥–∂–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */
export const PersistenceTestWidget: React.FC = () => {
  const { subscription, subscriptionHistory, user, addTestNotifications, clearNotifications, notifications, unreadCount } = useAppStore();

  // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ
  if (process.env.NODE_ENV !== 'development') {
    return null;
  }

  const hasSubscription = !!subscription;
  const hasHistory = subscriptionHistory.length > 0;
  const hasUser = !!user;

  return (
    <div className="bg-white rounded-lg p-4 border border-gray-200 shadow-sm">
      <div className="flex items-center space-x-2 mb-3">
        <InformationCircleIcon className="h-5 w-5 text-blue-600" />
        <h3 className="text-sm font-semibold text-gray-900">
          üß™ –¢–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (dev only)
        </h3>
      </div>
      
      <div className="space-y-2 text-xs">
        <div className="flex items-center space-x-2">
          {hasUser ? (
            <CheckCircleIcon className="h-4 w-4 text-green-600" />
          ) : (
            <ExclamationTriangleIcon className="h-4 w-4 text-yellow-600" />
          )}
          <span className={hasUser ? 'text-green-700' : 'text-yellow-700'}>
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hasUser ? '‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω' : '‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω'}
          </span>
        </div>
        
        <div className="flex items-center space-x-2">
          {hasSubscription ? (
            <CheckCircleIcon className="h-4 w-4 text-green-600" />
          ) : (
            <ExclamationTriangleIcon className="h-4 w-4 text-yellow-600" />
          )}
          <span className={hasSubscription ? 'text-green-700' : 'text-yellow-700'}>
            –ü–æ–¥–ø–∏—Å–∫–∞: {hasSubscription ? '‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞' : '‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}
          </span>
        </div>
        
        <div className="flex items-center space-x-2">
          {hasHistory ? (
            <CheckCircleIcon className="h-4 w-4 text-green-600" />
          ) : (
            <ExclamationTriangleIcon className="h-4 w-4 text-yellow-600" />
          )}
          <span className={hasHistory ? 'text-green-700' : 'text-yellow-700'}>
            –ò—Å—Ç–æ—Ä–∏—è: {hasHistory ? `‚úì ${subscriptionHistory.length} –∑–∞–ø–∏—Å–µ–π` : '‚ö† –ü—É—Å—Ç–∞'}
          </span>
        </div>

        {hasSubscription && (
          <div className="mt-3 p-2 bg-gray-50 rounded text-xs">
            <p><strong>–ü–æ–¥–ø–∏—Å–∫–∞:</strong> {subscription.name}</p>
            <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {subscription.status}</p>
            <p><strong>–î–æ:</strong> {new Date(subscription.endDate).toLocaleDateString('ru-RU')}</p>
          </div>
        )}

        <div className="mt-3 p-2 bg-blue-50 rounded text-xs">
          <p className="text-blue-800">
            üí° <strong>–¢–µ—Å—Ç:</strong> –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5) –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å
          </p>
        </div>

        <div className="mt-2 p-2 bg-green-50 rounded text-xs">
          <p className="text-green-800">
            ‚úÖ <strong>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ V3:</strong> DismissedAlerts —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ localStorage
          </p>
          <p className="text-green-700 mt-1">
            ‚Ä¢ Achievement —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 –º–∏–Ω—É—Ç—É<br/>
            ‚Ä¢ SubscriptionAlerts –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —á–∞—Å<br/>
            ‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ F5<br/>
            ‚Ä¢ DismissedAlerts —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏<br/>
            ‚Ä¢ Set —Ç–∏–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ localStorage
          </p>
          <div className="flex flex-wrap gap-2 mt-2">
            <button 
              onClick={() => {
                localStorage.removeItem('shown-notifications');
                window.location.reload();
              }}
              className="px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700"
            >
              üß™ –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            </button>
            
            <button 
              onClick={() => {
                console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
                const storeData = JSON.parse(localStorage.getItem('app-store') || '{}');
                
                let fixed = 0;
                
                // –ü–æ–º–µ—á–∞–µ–º achievement —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                if (storeData.state?.notifications) {
                  storeData.state.notifications.forEach((notification: any) => {
                    if (notification.type === 'achievement' && !notification.read) {
                      notification.read = true;
                      fixed++;
                      console.log(`‚úÖ Achievement –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: ${notification.title}`);
                    }
                  });
                  
                  localStorage.setItem('app-store', JSON.stringify(storeData));
                  
                  const achievementIds = storeData.state.notifications
                    .filter((n: any) => n.type === 'achievement')
                    .map((n: any) => n.id);
                  
                  localStorage.setItem('shown-notifications', JSON.stringify(achievementIds));
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º dismissed alert –¥–ª—è SubscriptionAlerts (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º Set issue)
                if (storeData.state?.dismissedAlerts) {
                  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ Set –∏–ª–∏ Array
                  let currentDismissed = storeData.state.dismissedAlerts;
                  if (Array.isArray(currentDismissed)) {
                    if (!currentDismissed.includes('renewed_success')) {
                      currentDismissed.push('renewed_success');
                      fixed++;
                      console.log('‚úÖ SubscriptionAlert "renewed_success" –¥–æ–±–∞–≤–ª–µ–Ω –≤ Array');
                    }
                  } else {
                    // –ï—Å–ª–∏ —ç—Ç–æ Set, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Array
                    const dismissedArray = Array.from(currentDismissed || []);
                    if (!dismissedArray.includes('renewed_success')) {
                      dismissedArray.push('renewed_success');
                      storeData.state.dismissedAlerts = dismissedArray;
                      fixed++;
                      console.log('‚úÖ SubscriptionAlert "renewed_success" –¥–æ–±–∞–≤–ª–µ–Ω (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ Set)');
                    }
                  }
                } else {
                  storeData.state.dismissedAlerts = ['renewed_success'];
                  fixed++;
                  console.log('‚úÖ –°–æ–∑–¥–∞–Ω dismissedAlerts —Å "renewed_success"');
                }
                
                localStorage.setItem('app-store', JSON.stringify(storeData));
                
                console.log(`üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixed} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
                window.location.reload();
              }}
              className="px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700"
            >
              üîß –°–∫—Ä—ã—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            </button>
            
            <button 
              onClick={() => {
                console.log('üö® NUCLEAR OPTION: Force hiding notification');
                // Completely force hide the notification by modifying subscription date
                const storeData = JSON.parse(localStorage.getItem('app-store') || '{}');
                
                if (storeData.state?.subscription) {
                  // Set start date to more than 10 minutes ago
                  const oldDate = new Date();
                  oldDate.setHours(oldDate.getHours() - 2); // 2 hours ago
                  storeData.state.subscription.startDate = oldDate.toISOString();
                  console.log('‚úÖ Subscription start date set to 2 hours ago');
                }
                
                // Also ensure dismissedAlerts includes renewed_success
                if (!storeData.state) storeData.state = {};
                storeData.state.dismissedAlerts = ['renewed_success'];
                
                localStorage.setItem('app-store', JSON.stringify(storeData));
                console.log('üéâ NUCLEAR OPTION applied!');
                window.location.reload();
              }}
              className="px-2 py-1 bg-red-800 text-white text-xs rounded hover:bg-red-900"
            >
              ‚ò¢Ô∏è –Ø–î–ï–†–ù–ê–Ø –û–ü–¶–ò–Ø
            </button>
          </div>
        </div>

        {/* Notifications Test Section */}
        <div className="bg-purple-50 border border-purple-200 rounded-lg p-3 mt-3">
          <h3 className="text-purple-800 font-semibold text-sm flex items-center">
            <InformationCircleIcon className="h-4 w-4 mr-1" />
            üîî –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          </h3>
          <p className="text-purple-700 text-xs mt-1">
            –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications.length} | –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {unreadCount}
          </p>
          <div className="flex flex-wrap gap-2 mt-2">
            <button 
              onClick={() => {
                addTestNotifications();
                console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
              }}
              className="px-2 py-1 bg-purple-600 text-white text-xs rounded hover:bg-purple-700"
            >
              ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ
            </button>
            
            <button 
              onClick={() => {
                clearNotifications();
                console.log('üóëÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
              }}
              className="px-2 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700"
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};