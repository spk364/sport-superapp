import { kaspiPayService } from '../services/kaspiPayService';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è Kaspi Pay
 * –û—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Kaspi Bank
 */

export interface KaspiTestScenario {
  id: string;
  name: string;
  description: string;
  amount: number;
  phone?: string;
  expectedResult: 'success' | 'failure';
  errorCode?: string;
  processingTime: number; // seconds
}

export const kaspiTestScenarios: KaspiTestScenario[] = [
  {
    id: 'success_standard',
    name: '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞',
    description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Kaspi Pay',
    amount: 15000,
    phone: '+7 707 123 45 67',
    expectedResult: 'success',
    processingTime: 5,
  },
  {
    id: 'success_large_amount',
    name: '–ö—Ä—É–ø–Ω–∞—è —Å—É–º–º–∞',
    description: '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∫—Ä—É–ø–Ω–æ–π —Å—É–º–º—ã',
    amount: 100000,
    phone: '+7 707 123 45 67',
    expectedResult: 'success',
    processingTime: 8,
  },
  {
    id: 'insufficient_funds',
    name: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
    description: '–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤',
    amount: 1,
    phone: '+7 707 123 45 68',
    expectedResult: 'failure',
    errorCode: 'INSUFFICIENT_FUNDS',
    processingTime: 3,
  },
  {
    id: 'blocked_card',
    name: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞',
    description: '–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω - –∫–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞',
    amount: 5000,
    phone: '+7 707 123 45 69',
    expectedResult: 'failure',
    errorCode: 'CARD_BLOCKED',
    processingTime: 2,
  },
  {
    id: 'expired_card',
    name: '–ò—Å—Ç–µ–∫—à–∞—è –∫–∞—Ä—Ç–∞',
    description: '–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω - —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–µ–∫',
    amount: 10000,
    phone: '+7 707 123 45 70',
    expectedResult: 'failure',
    errorCode: 'CARD_EXPIRED',
    processingTime: 2,
  },
  {
    id: 'wrong_pin',
    name: '–ù–µ–≤–µ—Ä–Ω—ã–π PIN',
    description: '–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π PIN-–∫–æ–¥',
    amount: 7500,
    phone: '+7 707 123 45 71',
    expectedResult: 'failure',
    errorCode: 'WRONG_PIN',
    processingTime: 4,
  },
  {
    id: 'timeout',
    name: '–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏',
    description: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
    amount: 20000,
    phone: '+7 707 123 45 72',
    expectedResult: 'failure',
    errorCode: 'TIMEOUT',
    processingTime: 15,
  },
];

export const kaspiErrorCodes = {
  'INSUFFICIENT_FUNDS': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ',
  'CARD_BLOCKED': '–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞',
  'CARD_EXPIRED': '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–µ–∫',
  'WRONG_PIN': '–ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥',
  'TIMEOUT': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
  'NETWORK_ERROR': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
  'INVALID_AMOUNT': '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞',
  'LIMIT_EXCEEDED': '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π',
  'SERVICE_UNAVAILABLE': '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
};

/**
 * –ö–æ–¥—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç Kaspi
 */
export const kaspiTestCards = {
  // –£—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
  'success_standard': {
    pan: '4400 4301 0000 0001',
    description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É—Å–ø–µ—à–Ω–∞—è –∫–∞—Ä—Ç–∞ Kaspi Gold',
  },
  'success_premium': {
    pan: '4400 4302 0000 0001',
    description: '–ü—Ä–µ–º–∏—É–º –∫–∞—Ä—Ç–∞ Kaspi Red',
  },
  
  // –û—à–∏–±–∫–∏
  'insufficient_funds': {
    pan: '4400 4301 0000 0002',
    description: '–ö–∞—Ä—Ç–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º —Å—Ä–µ–¥—Å—Ç–≤',
  },
  'blocked_card': {
    pan: '4400 4301 0000 0003',
    description: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞',
  },
  'expired_card': {
    pan: '4400 4301 0000 0004',
    description: '–ö–∞—Ä—Ç–∞ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è',
  },
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö QR-–∫–æ–¥–æ–≤ –¥–ª—è Kaspi Pay
 */
export class KaspiTestQRGenerator {
  static generate(transactionId: string, amount: number): string {
    const qrData = {
      merchant: 'TEST_MERCHANT_123',
      transaction: transactionId,
      amount: amount,
      currency: 'KZT',
      timestamp: Date.now(),
    };

    // –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–π QR-–∫–æ–¥
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º base64 —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
    const qrString = JSON.stringify(qrData);
    return `data:image/png;base64,${btoa(qrString)}`;
  }

  static parse(qrCode: string): any {
    try {
      if (qrCode.startsWith('data:image/png;base64,')) {
        const data = qrCode.replace('data:image/png;base64,', '');
        return JSON.parse(atob(data));
      }
      return null;
    } catch {
      return null;
    }
  }
}

/**
 * –≠–º—É–ª—è—Ç–æ—Ä webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Kaspi
 */
export class KaspiWebhookEmulator {
  static async simulateWebhook(transactionId: string, status: string, delay = 3000): Promise<void> {
    return new Promise((resolve) => {
      setTimeout(() => {
        const webhookData = {
          transactionId,
          status,
          amount: 15000,
          currency: 'KZT',
          commission: 225,
          timestamp: new Date().toISOString(),
          signature: this.generateSignature(transactionId, status),
        };

        console.log('üì® Kaspi Webhook:', webhookData);
        
        // –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É webhook –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        window.dispatchEvent(new CustomEvent('kaspi-webhook', {
          detail: webhookData
        }));
        
        resolve();
      }, delay);
    });
  }

  private static generateSignature(transactionId: string, status: string): string {
    return btoa(`${transactionId}_${status}_test_signature`);
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Kaspi Pay
 */
export class KaspiTestUtils {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  static getScenarioByAmount(amount: number): KaspiTestScenario | null {
    return kaspiTestScenarios.find(scenario => scenario.amount === amount) || null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
   */
  static getTestPhone(scenarioId: string): string {
    const scenario = kaspiTestScenarios.find(s => s.id === scenarioId);
    return scenario?.phone || '+7 707 123 45 67';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º
   */
  static isTestPhone(phone: string): boolean {
    return kaspiTestScenarios.some(scenario => scenario.phone === phone);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–¥—É
   */
  static getErrorDescription(errorCode: string): string {
    return kaspiErrorCodes[errorCode as keyof typeof kaspiErrorCodes] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  static validateTestAmount(amount: number): { valid: boolean; message?: string } {
    if (amount < 100) {
      return { valid: false, message: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 100 —Ç–µ–Ω–≥–µ' };
    }
    
    if (amount > 1000000) {
      return { valid: false, message: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 1,000,000 —Ç–µ–Ω–≥–µ' };
    }

    return { valid: true };
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
   */
  static logTestScenario(scenario: KaspiTestScenario, result: any): void {
    console.group(`üß™ Kaspi Pay Test: ${scenario.name}`);
    console.log('üí∞ –°—É–º–º–∞:', scenario.amount, 'KZT');
    console.log('üì± –¢–µ–ª–µ—Ñ–æ–Ω:', scenario.phone);
    console.log('‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:', scenario.processingTime, '—Å–µ–∫');
    console.log('‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', scenario.expectedResult);
    if (scenario.errorCode) {
      console.log('‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏:', scenario.errorCode);
    }
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    console.groupEnd();
  }
}

/**
 * –î–µ–º–æ-—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Kaspi Pay
 */
export const runKaspiTestDemo = (): void => {
  console.log('üöÄ Kaspi Pay Test Demo');
  console.log('====================');
  
  console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:');
  kaspiTestScenarios.forEach((scenario, index) => {
    console.log(`${index + 1}. ${scenario.name} (${scenario.amount} KZT)`);
    console.log(`   ${scenario.description}`);
    console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${scenario.phone}`);
    console.log('');
  });

  console.log('üí≥ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã:');
  Object.entries(kaspiTestCards).forEach(([key, card]) => {
    console.log(`${card.pan} - ${card.description}`);
  });

  console.log('\nüéØ –ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:');
  console.log('1. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏');
  console.log('2. –ù–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å" ‚Üí "Kaspi Pay"');
  console.log('3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É–º–º—ã –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤');
  console.log('4. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏');

  console.log('\nüõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã:');
  console.log('- KaspiTestUtils.getScenarioByAmount(amount)');
  console.log('- KaspiTestUtils.getTestPhone(scenarioId)');
  console.log('- KaspiTestUtils.getErrorDescription(errorCode)');
  console.log('- KaspiWebhookEmulator.simulateWebhook(id, status)');
};

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –¥–µ–º–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (process.env.NODE_ENV === 'development') {
  setTimeout(() => {
    if (window.location.pathname.includes('subscription') || window.location.pathname.includes('payment')) {
      runKaspiTestDemo();
    }
  }, 2000);
}