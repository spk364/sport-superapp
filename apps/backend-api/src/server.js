import Fastify from 'fastify';

// –°–æ–∑–¥–∞–µ–º Fastify instance —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const fastify = Fastify({
  logger: {
    level: process.env.LOG_LEVEL || 'info',
    transport: process.env.NODE_ENV === 'development' ? {
      target: 'pino-pretty',
      options: {
        colorize: true,
        translateTime: 'HH:MM:ss',
        ignore: 'pid,hostname'
      }
    } : undefined
  },
  ajv: {
    customOptions: {
      strict: 'log',
      keywords: ['kind', 'modifier']
    }
  }
});

// Environment variables
await fastify.register(import('@fastify/env'), {
  confKey: 'config',
  schema: {
    type: 'object',
    required: ['PORT'],
    properties: {
      PORT: { type: 'string', default: '4000' },
      NODE_ENV: { type: 'string', default: 'development' },
      KASPI_API_URL: { type: 'string', default: 'https://kaspi.kz/qr/api/v1' },
      KASPI_MERCHANT_ID: { type: 'string' },
      KASPI_SECRET_KEY: { type: 'string' },
      KASPI_SUCCESS_URL: { type: 'string', default: 'http://localhost:3000/payments/success' },
      KASPI_FAILURE_URL: { type: 'string', default: 'http://localhost:3000/payments/failure' }
    }
  },
  dotenv: true
});

// Security
await fastify.register(import('@fastify/helmet'), {
  contentSecurityPolicy: false
});

// CORS
await fastify.register(import('@fastify/cors'), {
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://your-domain.com'] 
    : true,
  credentials: true
});

// Rate limiting –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
await fastify.register(import('@fastify/rate-limit'), {
  max: 100,
  timeWindow: '1 minute',
  skipOnError: false
});

// Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
await fastify.register(import('@fastify/swagger'), {
  openapi: {
    openapi: '3.0.0',
    info: {
      title: 'Trainer Mini App API',
      description: 'API –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Kaspi QR –æ–ø–ª–∞—Ç–æ–π',
      version: '1.0.0'
    },
    servers: [
      {
        url: 'http://localhost:4000',
        description: 'Development server'
      }
    ],
    tags: [
      { name: 'payments', description: 'Kaspi QR –ø–ª–∞—Ç–µ–∂–∏' },
      { name: 'subscriptions', description: '–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
      { name: 'auth', description: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' }
    ]
  }
});

await fastify.register(import('@fastify/swagger-ui'), {
  routePrefix: '/docs',
  uiConfig: {
    docExpansion: 'list',
    deepLinking: false
  },
  staticCSP: true,
  transformStaticCSP: (header) => header
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
await fastify.register(import('./plugins/kaspi.js'));
await fastify.register(import('./plugins/database.js'));

// API routes
await fastify.register(import('./routes/payments.js'), { prefix: '/api/v1/payments' });
await fastify.register(import('./routes/subscriptions.js'), { prefix: '/api/v1/subscriptions' });
await fastify.register(import('./routes/auth.js'), { prefix: '/api/v1/auth' });
await fastify.register(import('./routes/users.js'), { prefix: '/api/v1/users' });
await fastify.register(import('./routes/workouts.js'), { prefix: '/api/v1/workouts' });

// Health check
fastify.get('/health', {
  schema: {
    description: 'Health check endpoint',
    tags: ['health'],
    response: {
      200: {
        type: 'object',
        properties: {
          status: { type: 'string' },
          timestamp: { type: 'string' },
          uptime: { type: 'number' },
          version: { type: 'string' }
        }
      }
    }
  }
}, async (request, reply) => {
  return {
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    version: '1.0.0'
  };
});

// Root endpoint
fastify.get('/', {
  schema: {
    description: 'API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    tags: ['info'],
    response: {
      200: {
        type: 'object',
        properties: {
          message: { type: 'string' },
          version: { type: 'string' },
          documentation: { type: 'string' }
        }
      }
    }
  }
}, async (request, reply) => {
  return {
    message: 'Trainer Mini App Backend API',
    version: '1.0.0',
    documentation: '/docs'
  };
});

// Error handler
fastify.setErrorHandler(async (error, request, reply) => {
  fastify.log.error(error);
  
  if (error.validation) {
    return reply.status(400).send({
      success: false,
      error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      details: error.validation
    });
  }

  if (error.statusCode) {
    return reply.status(error.statusCode).send({
      success: false,
      error: error.message
    });
  }

  return reply.status(500).send({
    success: false,
    error: process.env.NODE_ENV === 'development' 
      ? error.message 
      : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});

// 404 handler
fastify.setNotFoundHandler(async (request, reply) => {
  return reply.status(404).send({
    success: false,
    error: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: request.url
  });
});

// Graceful shutdown
const gracefulShutdown = async (signal) => {
  fastify.log.info(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
  try {
    await fastify.close();
    process.exit(0);
  } catch (err) {
    fastify.log.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', err);
    process.exit(1);
  }
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const start = async () => {
  try {
    const PORT = fastify.config.PORT;
    await fastify.listen({ port: PORT, host: '0.0.0.0' });
    
    fastify.log.info(`üöÄ Fastify Backend API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    fastify.log.info(`üìç URL: http://localhost:${PORT}`);
    fastify.log.info(`‚ù§Ô∏è Health check: http://localhost:${PORT}/health`);
    fastify.log.info(`üìö API Docs: http://localhost:${PORT}/docs`);
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};

start(); 